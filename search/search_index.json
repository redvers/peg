{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Packages peg","title":"peg"},{"location":"peg--index/","text":"No package doc string provided for peg. Public Types \u00b6 primitive Unicode type R class UnicodeRange class Token class Terminal class Source class Skip class Sequence primitive Printer primitive Position primitive PegParser primitive PegString primitive PegChar primitive PegAny primitive PegIdent primitive PegRange primitive PegOpt primitive PegMany primitive PegMany1 primitive PegSep primitive PegSep1 primitive PegAnd primitive PegNot primitive PegSkip primitive PegSeq primitive PegChoice primitive PegDef primitive PegGrammar type Marker trait PegError class SyntaxError class DuplicateDefinition class MissingDefinition class UnknownNodeLabel primitive NoStartDefinition primitive MalformedAST primitive PegFormatError type Defs primitive PegCompiler class PegLabel type ParseResult type ParseOK primitive NotPresent primitive Skipped primitive Lex trait Parser primitive NoParser trait Label primitive NoLabel class Option class Not class Many type L class Literal primitive JsonParser primitive TObject primitive TPair primitive TArray primitive TString primitive TNumber primitive TBool primitive TNull class Hidden class Forward class EndOfFile class Choice type ASTChild class AST","title":"Package"},{"location":"peg--index/#public-types","text":"primitive Unicode type R class UnicodeRange class Token class Terminal class Source class Skip class Sequence primitive Printer primitive Position primitive PegParser primitive PegString primitive PegChar primitive PegAny primitive PegIdent primitive PegRange primitive PegOpt primitive PegMany primitive PegMany1 primitive PegSep primitive PegSep1 primitive PegAnd primitive PegNot primitive PegSkip primitive PegSeq primitive PegChoice primitive PegDef primitive PegGrammar type Marker trait PegError class SyntaxError class DuplicateDefinition class MissingDefinition class UnknownNodeLabel primitive NoStartDefinition primitive MalformedAST primitive PegFormatError type Defs primitive PegCompiler class PegLabel type ParseResult type ParseOK primitive NotPresent primitive Skipped primitive Lex trait Parser primitive NoParser trait Label primitive NoLabel class Option class Not class Many type L class Literal primitive JsonParser primitive TObject primitive TPair primitive TArray primitive TString primitive TNumber primitive TBool primitive TNull class Hidden class Forward class EndOfFile class Choice type ASTChild class AST","title":"Public Types"},{"location":"peg-AST/","text":"AST \u00b6 [Source] class val AST Constructors \u00b6 create \u00b6 [Source] new iso create( label': Label val = reference) : AST iso^ Parameters \u00b6 label': Label val = reference Returns \u00b6 AST iso^ Public fields \u00b6 embed children: Array [( AST val | Token val | NotPresent val)] ref \u00b6 [Source] Public Functions \u00b6 push \u00b6 [Source] fun ref push( some: (AST val | Token val | NotPresent val)) : None val Parameters \u00b6 some: ( AST val | Token val | NotPresent val) Returns \u00b6 None val label \u00b6 [Source] fun box label() : Label val Returns \u00b6 Label val size \u00b6 [Source] fun box size() : USize val Returns \u00b6 USize val extract \u00b6 [Source] fun box extract() : (AST val | Token val | NotPresent val) Returns \u00b6 ( AST val | Token val | NotPresent val)","title":"class AST"},{"location":"peg-AST/#ast","text":"[Source] class val AST","title":"AST"},{"location":"peg-AST/#constructors","text":"","title":"Constructors"},{"location":"peg-AST/#create","text":"[Source] new iso create( label': Label val = reference) : AST iso^","title":"create"},{"location":"peg-AST/#parameters","text":"label': Label val = reference","title":"Parameters"},{"location":"peg-AST/#returns","text":"AST iso^","title":"Returns"},{"location":"peg-AST/#public-fields","text":"","title":"Public fields"},{"location":"peg-AST/#embed-children-arrayast-val-token-val-notpresent-val-ref","text":"[Source]","title":"embed children: Array[(AST val | Token val | NotPresent val)] ref"},{"location":"peg-AST/#public-functions","text":"","title":"Public Functions"},{"location":"peg-AST/#push","text":"[Source] fun ref push( some: (AST val | Token val | NotPresent val)) : None val","title":"push"},{"location":"peg-AST/#parameters_1","text":"some: ( AST val | Token val | NotPresent val)","title":"Parameters"},{"location":"peg-AST/#returns_1","text":"None val","title":"Returns"},{"location":"peg-AST/#label","text":"[Source] fun box label() : Label val","title":"label"},{"location":"peg-AST/#returns_2","text":"Label val","title":"Returns"},{"location":"peg-AST/#size","text":"[Source] fun box size() : USize val","title":"size"},{"location":"peg-AST/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-AST/#extract","text":"[Source] fun box extract() : (AST val | Token val | NotPresent val)","title":"extract"},{"location":"peg-AST/#returns_4","text":"( AST val | Token val | NotPresent val)","title":"Returns"},{"location":"peg-ASTChild/","text":"ASTChild \u00b6 [Source] type ASTChild is (AST val | Token val | NotPresent val) Type Alias For \u00b6 ( AST val | Token val | NotPresent val)","title":"type ASTChild"},{"location":"peg-ASTChild/#astchild","text":"[Source] type ASTChild is (AST val | Token val | NotPresent val)","title":"ASTChild"},{"location":"peg-ASTChild/#type-alias-for","text":"( AST val | Token val | NotPresent val)","title":"Type Alias For"},{"location":"peg-Choice/","text":"Choice \u00b6 [Source] Given a sequence of parser rules, return the result of the first rule that matches. Note that the result is deterministic: if more than one of the rules could match, the first in the list will be chosen. class ref Choice is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box, b: Parser box) : Choice ref^ Parameters \u00b6 a: Parser box b: Parser box Returns \u00b6 Choice ref^ concat \u00b6 [Source] new ref concat( a: Choice box, b: Parser box) : Choice ref^ Parameters \u00b6 a: Choice box b: Parser box Returns \u00b6 Choice ref^ Public Functions \u00b6 div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Choice"},{"location":"peg-Choice/#choice","text":"[Source] Given a sequence of parser rules, return the result of the first rule that matches. Note that the result is deterministic: if more than one of the rules could match, the first in the list will be chosen. class ref Choice is Parser box","title":"Choice"},{"location":"peg-Choice/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Choice/#constructors","text":"","title":"Constructors"},{"location":"peg-Choice/#create","text":"[Source] new ref create( a: Parser box, b: Parser box) : Choice ref^","title":"create"},{"location":"peg-Choice/#parameters","text":"a: Parser box b: Parser box","title":"Parameters"},{"location":"peg-Choice/#returns","text":"Choice ref^","title":"Returns"},{"location":"peg-Choice/#concat","text":"[Source] new ref concat( a: Choice box, b: Parser box) : Choice ref^","title":"concat"},{"location":"peg-Choice/#parameters_1","text":"a: Choice box b: Parser box","title":"Parameters"},{"location":"peg-Choice/#returns_1","text":"Choice ref^","title":"Returns"},{"location":"peg-Choice/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Choice/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Choice/#parameters_2","text":"that: Parser box","title":"Parameters"},{"location":"peg-Choice/#returns_2","text":"Choice ref","title":"Returns"},{"location":"peg-Choice/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Choice/#parameters_3","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Choice/#returns_3","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Choice/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Choice/#returns_4","text":"String val","title":"Returns"},{"location":"peg-Choice/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Choice/#parameters_4","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Choice/#returns_5","text":"USize val","title":"Returns"},{"location":"peg-Choice/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Choice/#parameters_5","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Choice/#returns_6","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Choice/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Choice/#parameters_6","text":"that: Parser box","title":"Parameters"},{"location":"peg-Choice/#returns_7","text":"Sequence ref","title":"Returns"},{"location":"peg-Choice/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Choice/#returns_8","text":"Skip ref","title":"Returns"},{"location":"peg-Choice/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Choice/#returns_9","text":"Option ref","title":"Returns"},{"location":"peg-Choice/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Choice/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Choice/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Choice/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Choice/#parameters_8","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Choice/#returns_11","text":"Many ref","title":"Returns"},{"location":"peg-Choice/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Choice/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Choice/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Choice/#returns_13","text":"Not ref","title":"Returns"},{"location":"peg-Choice/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Choice/#parameters_9","text":"that: Parser box","title":"Parameters"},{"location":"peg-Choice/#returns_14","text":"Hidden ref","title":"Returns"},{"location":"peg-Choice/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Choice/#parameters_10","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Choice/#returns_15","text":"Terminal ref","title":"Returns"},{"location":"peg-Choice/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Choice/#returns_16","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Defs/","text":"Defs \u00b6 [Source] type Defs is HashMap[String val, (Forward ref , Token val), HashEq[String val] val] ref Type Alias For \u00b6 HashMap [ String val, ( Forward ref , Token val), HashEq [ String val] val] ref","title":"type Defs"},{"location":"peg-Defs/#defs","text":"[Source] type Defs is HashMap[String val, (Forward ref , Token val), HashEq[String val] val] ref","title":"Defs"},{"location":"peg-Defs/#type-alias-for","text":"HashMap [ String val, ( Forward ref , Token val), HashEq [ String val] val] ref","title":"Type Alias For"},{"location":"peg-DuplicateDefinition/","text":"DuplicateDefinition \u00b6 [Source] class val DuplicateDefinition is PegError box Implements \u00b6 PegError box Constructors \u00b6 create \u00b6 [Source] new val create( def': Token val, prev': Token val) : DuplicateDefinition val^ Parameters \u00b6 def': Token val prev': Token val Returns \u00b6 DuplicateDefinition val^ Public fields \u00b6 let def: Token val \u00b6 [Source] let prev: Token val \u00b6 [Source] Public Functions \u00b6 category \u00b6 [Source] fun box category() : String val Returns \u00b6 String val description \u00b6 [Source] fun box description() : String val Returns \u00b6 String val markers \u00b6 [Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref Returns \u00b6 Iterator [( Source val , USize val , USize val , String val)] ref","title":"class DuplicateDefinition"},{"location":"peg-DuplicateDefinition/#duplicatedefinition","text":"[Source] class val DuplicateDefinition is PegError box","title":"DuplicateDefinition"},{"location":"peg-DuplicateDefinition/#implements","text":"PegError box","title":"Implements"},{"location":"peg-DuplicateDefinition/#constructors","text":"","title":"Constructors"},{"location":"peg-DuplicateDefinition/#create","text":"[Source] new val create( def': Token val, prev': Token val) : DuplicateDefinition val^","title":"create"},{"location":"peg-DuplicateDefinition/#parameters","text":"def': Token val prev': Token val","title":"Parameters"},{"location":"peg-DuplicateDefinition/#returns","text":"DuplicateDefinition val^","title":"Returns"},{"location":"peg-DuplicateDefinition/#public-fields","text":"","title":"Public fields"},{"location":"peg-DuplicateDefinition/#let-def-token-val","text":"[Source]","title":"let def: Token val"},{"location":"peg-DuplicateDefinition/#let-prev-token-val","text":"[Source]","title":"let prev: Token val"},{"location":"peg-DuplicateDefinition/#public-functions","text":"","title":"Public Functions"},{"location":"peg-DuplicateDefinition/#category","text":"[Source] fun box category() : String val","title":"category"},{"location":"peg-DuplicateDefinition/#returns_1","text":"String val","title":"Returns"},{"location":"peg-DuplicateDefinition/#description","text":"[Source] fun box description() : String val","title":"description"},{"location":"peg-DuplicateDefinition/#returns_2","text":"String val","title":"Returns"},{"location":"peg-DuplicateDefinition/#markers","text":"[Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref","title":"markers"},{"location":"peg-DuplicateDefinition/#returns_3","text":"Iterator [( Source val , USize val , USize val , String val)] ref","title":"Returns"},{"location":"peg-EndOfFile/","text":"EndOfFile \u00b6 [Source] class ref EndOfFile is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box) : EndOfFile ref^ Parameters \u00b6 a: Parser box Returns \u00b6 EndOfFile ref^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class EndOfFile"},{"location":"peg-EndOfFile/#endoffile","text":"[Source] class ref EndOfFile is Parser box","title":"EndOfFile"},{"location":"peg-EndOfFile/#implements","text":"Parser box","title":"Implements"},{"location":"peg-EndOfFile/#constructors","text":"","title":"Constructors"},{"location":"peg-EndOfFile/#create","text":"[Source] new ref create( a: Parser box) : EndOfFile ref^","title":"create"},{"location":"peg-EndOfFile/#parameters","text":"a: Parser box","title":"Parameters"},{"location":"peg-EndOfFile/#returns","text":"EndOfFile ref^","title":"Returns"},{"location":"peg-EndOfFile/#public-functions","text":"","title":"Public Functions"},{"location":"peg-EndOfFile/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-EndOfFile/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-EndOfFile/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-EndOfFile/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-EndOfFile/#returns_2","text":"String val","title":"Returns"},{"location":"peg-EndOfFile/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-EndOfFile/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-EndOfFile/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-EndOfFile/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-EndOfFile/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-EndOfFile/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-EndOfFile/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-EndOfFile/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-EndOfFile/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-EndOfFile/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-EndOfFile/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-EndOfFile/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-EndOfFile/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-EndOfFile/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-EndOfFile/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-EndOfFile/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-EndOfFile/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-EndOfFile/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-EndOfFile/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-EndOfFile/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-EndOfFile/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-EndOfFile/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-EndOfFile/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-EndOfFile/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-EndOfFile/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-EndOfFile/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-EndOfFile/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-EndOfFile/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-EndOfFile/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-EndOfFile/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-EndOfFile/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-EndOfFile/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-EndOfFile/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-EndOfFile/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Forward/","text":"Forward \u00b6 [Source] A forwarding parser is used to create mutually recursive parse rules. The forwarding parser can be used instead, and is updated when the real parse rule is created. class ref Forward is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create() : Forward ref^ Returns \u00b6 Forward ref^ Public Functions \u00b6 update \u00b6 [Source] fun ref update( value: Parser box) : None val Parameters \u00b6 value: Parser box Returns \u00b6 None val parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) complete \u00b6 [Source] fun box complete() : Bool val Returns \u00b6 Bool val error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Forward"},{"location":"peg-Forward/#forward","text":"[Source] A forwarding parser is used to create mutually recursive parse rules. The forwarding parser can be used instead, and is updated when the real parse rule is created. class ref Forward is Parser box","title":"Forward"},{"location":"peg-Forward/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Forward/#constructors","text":"","title":"Constructors"},{"location":"peg-Forward/#create","text":"[Source] new ref create() : Forward ref^","title":"create"},{"location":"peg-Forward/#returns","text":"Forward ref^","title":"Returns"},{"location":"peg-Forward/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Forward/#update","text":"[Source] fun ref update( value: Parser box) : None val","title":"update"},{"location":"peg-Forward/#parameters","text":"value: Parser box","title":"Parameters"},{"location":"peg-Forward/#returns_1","text":"None val","title":"Returns"},{"location":"peg-Forward/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Forward/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Forward/#returns_2","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Forward/#complete","text":"[Source] fun box complete() : Bool val","title":"complete"},{"location":"peg-Forward/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-Forward/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Forward/#returns_4","text":"String val","title":"Returns"},{"location":"peg-Forward/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Forward/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Forward/#returns_5","text":"USize val","title":"Returns"},{"location":"peg-Forward/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Forward/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Forward/#returns_6","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Forward/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Forward/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Forward/#returns_7","text":"Sequence ref","title":"Returns"},{"location":"peg-Forward/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Forward/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Forward/#returns_8","text":"Choice ref","title":"Returns"},{"location":"peg-Forward/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Forward/#returns_9","text":"Skip ref","title":"Returns"},{"location":"peg-Forward/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Forward/#returns_10","text":"Option ref","title":"Returns"},{"location":"peg-Forward/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Forward/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Forward/#returns_11","text":"Many ref","title":"Returns"},{"location":"peg-Forward/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Forward/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Forward/#returns_12","text":"Many ref","title":"Returns"},{"location":"peg-Forward/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Forward/#returns_13","text":"Not ref","title":"Returns"},{"location":"peg-Forward/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Forward/#returns_14","text":"Not ref","title":"Returns"},{"location":"peg-Forward/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Forward/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-Forward/#returns_15","text":"Hidden ref","title":"Returns"},{"location":"peg-Forward/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Forward/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Forward/#returns_16","text":"Terminal ref","title":"Returns"},{"location":"peg-Forward/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Forward/#returns_17","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Hidden/","text":"Hidden \u00b6 [Source] A hidden channel is used to specify whitespace, comments, and any other lexical tokens that should be discarded from the input stream. This replaces the hidden channel. class ref Hidden is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box, hide: Parser box) : Hidden ref^ Parameters \u00b6 a: Parser box hide: Parser box Returns \u00b6 Hidden ref^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Hidden"},{"location":"peg-Hidden/#hidden","text":"[Source] A hidden channel is used to specify whitespace, comments, and any other lexical tokens that should be discarded from the input stream. This replaces the hidden channel. class ref Hidden is Parser box","title":"Hidden"},{"location":"peg-Hidden/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Hidden/#constructors","text":"","title":"Constructors"},{"location":"peg-Hidden/#create","text":"[Source] new ref create( a: Parser box, hide: Parser box) : Hidden ref^","title":"create"},{"location":"peg-Hidden/#parameters","text":"a: Parser box hide: Parser box","title":"Parameters"},{"location":"peg-Hidden/#returns","text":"Hidden ref^","title":"Returns"},{"location":"peg-Hidden/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Hidden/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Hidden/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Hidden/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Hidden/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Hidden/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Hidden/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Hidden/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Hidden/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-Hidden/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Hidden/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Hidden/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Hidden/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Hidden/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Hidden/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-Hidden/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Hidden/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Hidden/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-Hidden/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Hidden/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-Hidden/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Hidden/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-Hidden/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Hidden/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Hidden/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Hidden/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Hidden/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Hidden/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Hidden/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Hidden/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Hidden/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Hidden/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Hidden/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Hidden/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-Hidden/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-Hidden/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Hidden/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Hidden/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-Hidden/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Hidden/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-JsonParser/","text":"JsonParser \u00b6 [Source] primitive val JsonParser Constructors \u00b6 create \u00b6 [Source] new val create() : JsonParser val^ Returns \u00b6 JsonParser val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : Parser val Returns \u00b6 Parser val eq \u00b6 [Source] fun box eq( that: JsonParser val) : Bool val Parameters \u00b6 that: JsonParser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: JsonParser val) : Bool val Parameters \u00b6 that: JsonParser val Returns \u00b6 Bool val","title":"primitive JsonParser"},{"location":"peg-JsonParser/#jsonparser","text":"[Source] primitive val JsonParser","title":"JsonParser"},{"location":"peg-JsonParser/#constructors","text":"","title":"Constructors"},{"location":"peg-JsonParser/#create","text":"[Source] new val create() : JsonParser val^","title":"create"},{"location":"peg-JsonParser/#returns","text":"JsonParser val^","title":"Returns"},{"location":"peg-JsonParser/#public-functions","text":"","title":"Public Functions"},{"location":"peg-JsonParser/#apply","text":"[Source] fun box apply() : Parser val","title":"apply"},{"location":"peg-JsonParser/#returns_1","text":"Parser val","title":"Returns"},{"location":"peg-JsonParser/#eq","text":"[Source] fun box eq( that: JsonParser val) : Bool val","title":"eq"},{"location":"peg-JsonParser/#parameters","text":"that: JsonParser val","title":"Parameters"},{"location":"peg-JsonParser/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-JsonParser/#ne","text":"[Source] fun box ne( that: JsonParser val) : Bool val","title":"ne"},{"location":"peg-JsonParser/#parameters_1","text":"that: JsonParser val","title":"Parameters"},{"location":"peg-JsonParser/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-L/","text":"L \u00b6 [Source] type L is Literal ref Type Alias For \u00b6 Literal ref","title":"type L"},{"location":"peg-L/#l","text":"[Source] type L is Literal ref","title":"L"},{"location":"peg-L/#type-alias-for","text":"Literal ref","title":"Type Alias For"},{"location":"peg-Label/","text":"Label \u00b6 [Source] trait val Label Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val","title":"trait Label"},{"location":"peg-Label/#label","text":"[Source] trait val Label","title":"Label"},{"location":"peg-Label/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Label/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-Label/#returns","text":"String val","title":"Returns"},{"location":"peg-Lex/","text":"Lex \u00b6 [Source] Returned when a parse tree isn't neeeded primitive val Lex Constructors \u00b6 create \u00b6 [Source] new val create() : Lex val^ Returns \u00b6 Lex val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: Lex val) : Bool val Parameters \u00b6 that: Lex val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Lex val) : Bool val Parameters \u00b6 that: Lex val Returns \u00b6 Bool val","title":"primitive Lex"},{"location":"peg-Lex/#lex","text":"[Source] Returned when a parse tree isn't neeeded primitive val Lex","title":"Lex"},{"location":"peg-Lex/#constructors","text":"","title":"Constructors"},{"location":"peg-Lex/#create","text":"[Source] new val create() : Lex val^","title":"create"},{"location":"peg-Lex/#returns","text":"Lex val^","title":"Returns"},{"location":"peg-Lex/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Lex/#eq","text":"[Source] fun box eq( that: Lex val) : Bool val","title":"eq"},{"location":"peg-Lex/#parameters","text":"that: Lex val","title":"Parameters"},{"location":"peg-Lex/#returns_1","text":"Bool val","title":"Returns"},{"location":"peg-Lex/#ne","text":"[Source] fun box ne( that: Lex val) : Bool val","title":"ne"},{"location":"peg-Lex/#parameters_1","text":"that: Lex val","title":"Parameters"},{"location":"peg-Lex/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-Literal/","text":"Literal \u00b6 [Source] class ref Literal is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new val create( from: String val) : Literal val^ Parameters \u00b6 from: String val Returns \u00b6 Literal val^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Literal"},{"location":"peg-Literal/#literal","text":"[Source] class ref Literal is Parser box","title":"Literal"},{"location":"peg-Literal/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Literal/#constructors","text":"","title":"Constructors"},{"location":"peg-Literal/#create","text":"[Source] new val create( from: String val) : Literal val^","title":"create"},{"location":"peg-Literal/#parameters","text":"from: String val","title":"Parameters"},{"location":"peg-Literal/#returns","text":"Literal val^","title":"Returns"},{"location":"peg-Literal/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Literal/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Literal/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Literal/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Literal/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Literal/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Literal/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Literal/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Literal/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-Literal/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Literal/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Literal/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Literal/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Literal/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Literal/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-Literal/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Literal/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Literal/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-Literal/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Literal/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-Literal/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Literal/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-Literal/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Literal/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Literal/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Literal/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Literal/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Literal/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Literal/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Literal/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Literal/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Literal/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Literal/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Literal/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-Literal/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-Literal/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Literal/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Literal/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-Literal/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Literal/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-MalformedAST/","text":"MalformedAST \u00b6 [Source] primitive val MalformedAST is PegError box Implements \u00b6 PegError box Constructors \u00b6 create \u00b6 [Source] new val create() : MalformedAST val^ Returns \u00b6 MalformedAST val^ Public Functions \u00b6 category \u00b6 [Source] fun box category() : String val Returns \u00b6 String val description \u00b6 [Source] fun box description() : String val Returns \u00b6 String val markers \u00b6 [Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref Returns \u00b6 Iterator [( Source val , USize val , USize val , String val)] ref eq \u00b6 [Source] fun box eq( that: MalformedAST val) : Bool val Parameters \u00b6 that: MalformedAST val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: MalformedAST val) : Bool val Parameters \u00b6 that: MalformedAST val Returns \u00b6 Bool val","title":"primitive MalformedAST"},{"location":"peg-MalformedAST/#malformedast","text":"[Source] primitive val MalformedAST is PegError box","title":"MalformedAST"},{"location":"peg-MalformedAST/#implements","text":"PegError box","title":"Implements"},{"location":"peg-MalformedAST/#constructors","text":"","title":"Constructors"},{"location":"peg-MalformedAST/#create","text":"[Source] new val create() : MalformedAST val^","title":"create"},{"location":"peg-MalformedAST/#returns","text":"MalformedAST val^","title":"Returns"},{"location":"peg-MalformedAST/#public-functions","text":"","title":"Public Functions"},{"location":"peg-MalformedAST/#category","text":"[Source] fun box category() : String val","title":"category"},{"location":"peg-MalformedAST/#returns_1","text":"String val","title":"Returns"},{"location":"peg-MalformedAST/#description","text":"[Source] fun box description() : String val","title":"description"},{"location":"peg-MalformedAST/#returns_2","text":"String val","title":"Returns"},{"location":"peg-MalformedAST/#markers","text":"[Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref","title":"markers"},{"location":"peg-MalformedAST/#returns_3","text":"Iterator [( Source val , USize val , USize val , String val)] ref","title":"Returns"},{"location":"peg-MalformedAST/#eq","text":"[Source] fun box eq( that: MalformedAST val) : Bool val","title":"eq"},{"location":"peg-MalformedAST/#parameters","text":"that: MalformedAST val","title":"Parameters"},{"location":"peg-MalformedAST/#returns_4","text":"Bool val","title":"Returns"},{"location":"peg-MalformedAST/#ne","text":"[Source] fun box ne( that: MalformedAST val) : Bool val","title":"ne"},{"location":"peg-MalformedAST/#parameters_1","text":"that: MalformedAST val","title":"Parameters"},{"location":"peg-MalformedAST/#returns_5","text":"Bool val","title":"Returns"},{"location":"peg-Many/","text":"Many \u00b6 [Source] class ref Many is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box, sep: Parser box, require: Bool val) : Many ref^ Parameters \u00b6 a: Parser box sep: Parser box require: Bool val Returns \u00b6 Many ref^ Public Functions \u00b6 label \u00b6 [Source] fun box label() : Label val Returns \u00b6 Label val node \u00b6 [Source] fun ref node( value: Label val) : Many ref Parameters \u00b6 value: Label val Returns \u00b6 Many ref parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Many"},{"location":"peg-Many/#many","text":"[Source] class ref Many is Parser box","title":"Many"},{"location":"peg-Many/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Many/#constructors","text":"","title":"Constructors"},{"location":"peg-Many/#create","text":"[Source] new ref create( a: Parser box, sep: Parser box, require: Bool val) : Many ref^","title":"create"},{"location":"peg-Many/#parameters","text":"a: Parser box sep: Parser box require: Bool val","title":"Parameters"},{"location":"peg-Many/#returns","text":"Many ref^","title":"Returns"},{"location":"peg-Many/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Many/#label","text":"[Source] fun box label() : Label val","title":"label"},{"location":"peg-Many/#returns_1","text":"Label val","title":"Returns"},{"location":"peg-Many/#node","text":"[Source] fun ref node( value: Label val) : Many ref","title":"node"},{"location":"peg-Many/#parameters_1","text":"value: Label val","title":"Parameters"},{"location":"peg-Many/#returns_2","text":"Many ref","title":"Returns"},{"location":"peg-Many/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Many/#parameters_2","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Many/#returns_3","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Many/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Many/#returns_4","text":"String val","title":"Returns"},{"location":"peg-Many/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Many/#parameters_3","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Many/#returns_5","text":"USize val","title":"Returns"},{"location":"peg-Many/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Many/#parameters_4","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Many/#returns_6","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Many/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Many/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Many/#returns_7","text":"Sequence ref","title":"Returns"},{"location":"peg-Many/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Many/#parameters_6","text":"that: Parser box","title":"Parameters"},{"location":"peg-Many/#returns_8","text":"Choice ref","title":"Returns"},{"location":"peg-Many/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Many/#returns_9","text":"Skip ref","title":"Returns"},{"location":"peg-Many/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Many/#returns_10","text":"Option ref","title":"Returns"},{"location":"peg-Many/#many_1","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Many/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Many/#returns_11","text":"Many ref","title":"Returns"},{"location":"peg-Many/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Many/#parameters_8","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Many/#returns_12","text":"Many ref","title":"Returns"},{"location":"peg-Many/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Many/#returns_13","text":"Not ref","title":"Returns"},{"location":"peg-Many/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Many/#returns_14","text":"Not ref","title":"Returns"},{"location":"peg-Many/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Many/#parameters_9","text":"that: Parser box","title":"Parameters"},{"location":"peg-Many/#returns_15","text":"Hidden ref","title":"Returns"},{"location":"peg-Many/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Many/#parameters_10","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Many/#returns_16","text":"Terminal ref","title":"Returns"},{"location":"peg-Many/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Many/#returns_17","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Marker/","text":"Marker \u00b6 [Source] type Marker is (Source val , USize val , USize val , String val) Type Alias For \u00b6 ( Source val , USize val , USize val , String val)","title":"type Marker"},{"location":"peg-Marker/#marker","text":"[Source] type Marker is (Source val , USize val , USize val , String val)","title":"Marker"},{"location":"peg-Marker/#type-alias-for","text":"( Source val , USize val , USize val , String val)","title":"Type Alias For"},{"location":"peg-MissingDefinition/","text":"MissingDefinition \u00b6 [Source] class val MissingDefinition is PegError box Implements \u00b6 PegError box Constructors \u00b6 create \u00b6 [Source] new val create( token': Token val) : MissingDefinition val^ Parameters \u00b6 token': Token val Returns \u00b6 MissingDefinition val^ Public fields \u00b6 let token: Token val \u00b6 [Source] Public Functions \u00b6 category \u00b6 [Source] fun box category() : String val Returns \u00b6 String val description \u00b6 [Source] fun box description() : String val Returns \u00b6 String val markers \u00b6 [Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref Returns \u00b6 Iterator [( Source val , USize val , USize val , String val)] ref","title":"class MissingDefinition"},{"location":"peg-MissingDefinition/#missingdefinition","text":"[Source] class val MissingDefinition is PegError box","title":"MissingDefinition"},{"location":"peg-MissingDefinition/#implements","text":"PegError box","title":"Implements"},{"location":"peg-MissingDefinition/#constructors","text":"","title":"Constructors"},{"location":"peg-MissingDefinition/#create","text":"[Source] new val create( token': Token val) : MissingDefinition val^","title":"create"},{"location":"peg-MissingDefinition/#parameters","text":"token': Token val","title":"Parameters"},{"location":"peg-MissingDefinition/#returns","text":"MissingDefinition val^","title":"Returns"},{"location":"peg-MissingDefinition/#public-fields","text":"","title":"Public fields"},{"location":"peg-MissingDefinition/#let-token-token-val","text":"[Source]","title":"let token: Token val"},{"location":"peg-MissingDefinition/#public-functions","text":"","title":"Public Functions"},{"location":"peg-MissingDefinition/#category","text":"[Source] fun box category() : String val","title":"category"},{"location":"peg-MissingDefinition/#returns_1","text":"String val","title":"Returns"},{"location":"peg-MissingDefinition/#description","text":"[Source] fun box description() : String val","title":"description"},{"location":"peg-MissingDefinition/#returns_2","text":"String val","title":"Returns"},{"location":"peg-MissingDefinition/#markers","text":"[Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref","title":"markers"},{"location":"peg-MissingDefinition/#returns_3","text":"Iterator [( Source val , USize val , USize val , String val)] ref","title":"Returns"},{"location":"peg-NoLabel/","text":"NoLabel \u00b6 [Source] primitive val NoLabel is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : NoLabel val^ Returns \u00b6 NoLabel val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: NoLabel val) : Bool val Parameters \u00b6 that: NoLabel val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: NoLabel val) : Bool val Parameters \u00b6 that: NoLabel val Returns \u00b6 Bool val","title":"primitive NoLabel"},{"location":"peg-NoLabel/#nolabel","text":"[Source] primitive val NoLabel is Label val","title":"NoLabel"},{"location":"peg-NoLabel/#implements","text":"Label val","title":"Implements"},{"location":"peg-NoLabel/#constructors","text":"","title":"Constructors"},{"location":"peg-NoLabel/#create","text":"[Source] new val create() : NoLabel val^","title":"create"},{"location":"peg-NoLabel/#returns","text":"NoLabel val^","title":"Returns"},{"location":"peg-NoLabel/#public-functions","text":"","title":"Public Functions"},{"location":"peg-NoLabel/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-NoLabel/#returns_1","text":"String val","title":"Returns"},{"location":"peg-NoLabel/#eq","text":"[Source] fun box eq( that: NoLabel val) : Bool val","title":"eq"},{"location":"peg-NoLabel/#parameters","text":"that: NoLabel val","title":"Parameters"},{"location":"peg-NoLabel/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-NoLabel/#ne","text":"[Source] fun box ne( that: NoLabel val) : Bool val","title":"ne"},{"location":"peg-NoLabel/#parameters_1","text":"that: NoLabel val","title":"Parameters"},{"location":"peg-NoLabel/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-NoParser/","text":"NoParser \u00b6 [Source] primitive val NoParser is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new val create() : NoParser val^ Returns \u00b6 NoParser val^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref eq \u00b6 [Source] fun box eq( that: NoParser val) : Bool val Parameters \u00b6 that: NoParser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: NoParser val) : Bool val Parameters \u00b6 that: NoParser val Returns \u00b6 Bool val","title":"primitive NoParser"},{"location":"peg-NoParser/#noparser","text":"[Source] primitive val NoParser is Parser box","title":"NoParser"},{"location":"peg-NoParser/#implements","text":"Parser box","title":"Implements"},{"location":"peg-NoParser/#constructors","text":"","title":"Constructors"},{"location":"peg-NoParser/#create","text":"[Source] new val create() : NoParser val^","title":"create"},{"location":"peg-NoParser/#returns","text":"NoParser val^","title":"Returns"},{"location":"peg-NoParser/#public-functions","text":"","title":"Public Functions"},{"location":"peg-NoParser/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-NoParser/#parameters","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-NoParser/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-NoParser/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-NoParser/#returns_2","text":"String val","title":"Returns"},{"location":"peg-NoParser/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-NoParser/#parameters_1","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-NoParser/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-NoParser/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-NoParser/#parameters_2","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-NoParser/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-NoParser/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-NoParser/#parameters_3","text":"that: Parser box","title":"Parameters"},{"location":"peg-NoParser/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-NoParser/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-NoParser/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-NoParser/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-NoParser/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-NoParser/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-NoParser/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-NoParser/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-NoParser/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-NoParser/#parameters_5","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-NoParser/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-NoParser/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-NoParser/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-NoParser/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-NoParser/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-NoParser/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-NoParser/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-NoParser/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-NoParser/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-NoParser/#parameters_7","text":"that: Parser box","title":"Parameters"},{"location":"peg-NoParser/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-NoParser/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-NoParser/#parameters_8","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-NoParser/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-NoParser/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-NoParser/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-NoParser/#eq","text":"[Source] fun box eq( that: NoParser val) : Bool val","title":"eq"},{"location":"peg-NoParser/#parameters_9","text":"that: NoParser val","title":"Parameters"},{"location":"peg-NoParser/#returns_16","text":"Bool val","title":"Returns"},{"location":"peg-NoParser/#ne","text":"[Source] fun box ne( that: NoParser val) : Bool val","title":"ne"},{"location":"peg-NoParser/#parameters_10","text":"that: NoParser val","title":"Parameters"},{"location":"peg-NoParser/#returns_17","text":"Bool val","title":"Returns"},{"location":"peg-NoStartDefinition/","text":"NoStartDefinition \u00b6 [Source] primitive val NoStartDefinition is PegError box Implements \u00b6 PegError box Constructors \u00b6 create \u00b6 [Source] new val create() : NoStartDefinition val^ Returns \u00b6 NoStartDefinition val^ Public Functions \u00b6 category \u00b6 [Source] fun box category() : String val Returns \u00b6 String val description \u00b6 [Source] fun box description() : String val Returns \u00b6 String val markers \u00b6 [Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref Returns \u00b6 Iterator [( Source val , USize val , USize val , String val)] ref eq \u00b6 [Source] fun box eq( that: NoStartDefinition val) : Bool val Parameters \u00b6 that: NoStartDefinition val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: NoStartDefinition val) : Bool val Parameters \u00b6 that: NoStartDefinition val Returns \u00b6 Bool val","title":"primitive NoStartDefinition"},{"location":"peg-NoStartDefinition/#nostartdefinition","text":"[Source] primitive val NoStartDefinition is PegError box","title":"NoStartDefinition"},{"location":"peg-NoStartDefinition/#implements","text":"PegError box","title":"Implements"},{"location":"peg-NoStartDefinition/#constructors","text":"","title":"Constructors"},{"location":"peg-NoStartDefinition/#create","text":"[Source] new val create() : NoStartDefinition val^","title":"create"},{"location":"peg-NoStartDefinition/#returns","text":"NoStartDefinition val^","title":"Returns"},{"location":"peg-NoStartDefinition/#public-functions","text":"","title":"Public Functions"},{"location":"peg-NoStartDefinition/#category","text":"[Source] fun box category() : String val","title":"category"},{"location":"peg-NoStartDefinition/#returns_1","text":"String val","title":"Returns"},{"location":"peg-NoStartDefinition/#description","text":"[Source] fun box description() : String val","title":"description"},{"location":"peg-NoStartDefinition/#returns_2","text":"String val","title":"Returns"},{"location":"peg-NoStartDefinition/#markers","text":"[Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref","title":"markers"},{"location":"peg-NoStartDefinition/#returns_3","text":"Iterator [( Source val , USize val , USize val , String val)] ref","title":"Returns"},{"location":"peg-NoStartDefinition/#eq","text":"[Source] fun box eq( that: NoStartDefinition val) : Bool val","title":"eq"},{"location":"peg-NoStartDefinition/#parameters","text":"that: NoStartDefinition val","title":"Parameters"},{"location":"peg-NoStartDefinition/#returns_4","text":"Bool val","title":"Returns"},{"location":"peg-NoStartDefinition/#ne","text":"[Source] fun box ne( that: NoStartDefinition val) : Bool val","title":"ne"},{"location":"peg-NoStartDefinition/#parameters_1","text":"that: NoStartDefinition val","title":"Parameters"},{"location":"peg-NoStartDefinition/#returns_5","text":"Bool val","title":"Returns"},{"location":"peg-Not/","text":"Not \u00b6 [Source] If the parse succeeds, then fail. Otherwise, return a zero length Skipped. class ref Not is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box) : Not ref^ Parameters \u00b6 a: Parser box Returns \u00b6 Not ref^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Not"},{"location":"peg-Not/#not","text":"[Source] If the parse succeeds, then fail. Otherwise, return a zero length Skipped. class ref Not is Parser box","title":"Not"},{"location":"peg-Not/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Not/#constructors","text":"","title":"Constructors"},{"location":"peg-Not/#create","text":"[Source] new ref create( a: Parser box) : Not ref^","title":"create"},{"location":"peg-Not/#parameters","text":"a: Parser box","title":"Parameters"},{"location":"peg-Not/#returns","text":"Not ref^","title":"Returns"},{"location":"peg-Not/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Not/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Not/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Not/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Not/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Not/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Not/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Not/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Not/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-Not/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Not/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Not/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Not/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Not/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Not/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-Not/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Not/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Not/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-Not/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Not/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-Not/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Not/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-Not/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Not/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Not/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Not/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Not/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Not/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Not/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Not/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Not/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Not/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Not/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Not/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-Not/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-Not/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Not/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Not/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-Not/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Not/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-NotPresent/","text":"NotPresent \u00b6 [Source] Returned by Option when the parse isn't found primitive val NotPresent Constructors \u00b6 create \u00b6 [Source] new val create() : NotPresent val^ Returns \u00b6 NotPresent val^ Public Functions \u00b6 label \u00b6 [Source] fun box label() : Label val Returns \u00b6 Label val eq \u00b6 [Source] fun box eq( that: NotPresent val) : Bool val Parameters \u00b6 that: NotPresent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: NotPresent val) : Bool val Parameters \u00b6 that: NotPresent val Returns \u00b6 Bool val","title":"primitive NotPresent"},{"location":"peg-NotPresent/#notpresent","text":"[Source] Returned by Option when the parse isn't found primitive val NotPresent","title":"NotPresent"},{"location":"peg-NotPresent/#constructors","text":"","title":"Constructors"},{"location":"peg-NotPresent/#create","text":"[Source] new val create() : NotPresent val^","title":"create"},{"location":"peg-NotPresent/#returns","text":"NotPresent val^","title":"Returns"},{"location":"peg-NotPresent/#public-functions","text":"","title":"Public Functions"},{"location":"peg-NotPresent/#label","text":"[Source] fun box label() : Label val","title":"label"},{"location":"peg-NotPresent/#returns_1","text":"Label val","title":"Returns"},{"location":"peg-NotPresent/#eq","text":"[Source] fun box eq( that: NotPresent val) : Bool val","title":"eq"},{"location":"peg-NotPresent/#parameters","text":"that: NotPresent val","title":"Parameters"},{"location":"peg-NotPresent/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-NotPresent/#ne","text":"[Source] fun box ne( that: NotPresent val) : Bool val","title":"ne"},{"location":"peg-NotPresent/#parameters_1","text":"that: NotPresent val","title":"Parameters"},{"location":"peg-NotPresent/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-Option/","text":"Option \u00b6 [Source] class ref Option is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box) : Option ref^ Parameters \u00b6 a: Parser box Returns \u00b6 Option ref^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Option"},{"location":"peg-Option/#option","text":"[Source] class ref Option is Parser box","title":"Option"},{"location":"peg-Option/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Option/#constructors","text":"","title":"Constructors"},{"location":"peg-Option/#create","text":"[Source] new ref create( a: Parser box) : Option ref^","title":"create"},{"location":"peg-Option/#parameters","text":"a: Parser box","title":"Parameters"},{"location":"peg-Option/#returns","text":"Option ref^","title":"Returns"},{"location":"peg-Option/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Option/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Option/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Option/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Option/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Option/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Option/#skip_hidden","text":"[Source] fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Option/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Option/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-Option/#result","text":"[Source] fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Option/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Option/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Option/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Option/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Option/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-Option/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Option/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Option/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-Option/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Option/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-Option/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Option/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-Option/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Option/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Option/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Option/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Option/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Option/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Option/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Option/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Option/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Option/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Option/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Option/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-Option/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-Option/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Option/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Option/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-Option/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Option/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-ParseOK/","text":"ParseOK \u00b6 [Source] type ParseOK is (AST val | Token val | NotPresent val | Skipped val | Lex val) Type Alias For \u00b6 ( AST val | Token val | NotPresent val | Skipped val | Lex val)","title":"type ParseOK"},{"location":"peg-ParseOK/#parseok","text":"[Source] type ParseOK is (AST val | Token val | NotPresent val | Skipped val | Lex val)","title":"ParseOK"},{"location":"peg-ParseOK/#type-alias-for","text":"( AST val | Token val | NotPresent val | Skipped val | Lex val)","title":"Type Alias For"},{"location":"peg-ParseResult/","text":"ParseResult \u00b6 [Source] type ParseResult is (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Type Alias For \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"type ParseResult"},{"location":"peg-ParseResult/#parseresult","text":"[Source] type ParseResult is (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"ParseResult"},{"location":"peg-ParseResult/#type-alias-for","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Type Alias For"},{"location":"peg-Parser/","text":"Parser \u00b6 [Source] trait box Parser Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val = 0, tree: Bool val = true, hidden: Parser box = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val = 0 tree: Bool val = true hidden: Parser box = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 [Source] Return a new start location, skipping over hidden tokens. fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 [Source] Once a terminal parser has an offset and length, it should call result to return either a token (if a tree is requested) or a new lexical position. fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 [Source] fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 [Source] fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 [Source] fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 [Source] fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 [Source] fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 [Source] fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 [Source] fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 [Source] fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 [Source] fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 [Source] fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"trait Parser"},{"location":"peg-Parser/#parser","text":"[Source] trait box Parser","title":"Parser"},{"location":"peg-Parser/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Parser/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val = 0, tree: Bool val = true, hidden: Parser box = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Parser/#parameters","text":"source: Source val offset: USize val = 0 tree: Bool val = true hidden: Parser box = reference","title":"Parameters"},{"location":"peg-Parser/#returns","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Parser/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Parser/#returns_1","text":"String val","title":"Returns"},{"location":"peg-Parser/#skip_hidden","text":"[Source] Return a new start location, skipping over hidden tokens. fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Parser/#parameters_1","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Parser/#returns_2","text":"USize val","title":"Returns"},{"location":"peg-Parser/#result","text":"[Source] Once a terminal parser has an offset and length, it should call result to return either a token (if a tree is requested) or a new lexical position. fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Parser/#parameters_2","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Parser/#returns_3","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Parser/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Parser/#parameters_3","text":"that: Parser box","title":"Parameters"},{"location":"peg-Parser/#returns_4","text":"Sequence ref","title":"Returns"},{"location":"peg-Parser/#div","text":"[Source] fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Parser/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Parser/#returns_5","text":"Choice ref","title":"Returns"},{"location":"peg-Parser/#neg","text":"[Source] fun box neg() : Skip ref","title":"neg"},{"location":"peg-Parser/#returns_6","text":"Skip ref","title":"Returns"},{"location":"peg-Parser/#opt","text":"[Source] fun box opt() : Option ref","title":"opt"},{"location":"peg-Parser/#returns_7","text":"Option ref","title":"Returns"},{"location":"peg-Parser/#many","text":"[Source] fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Parser/#parameters_5","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Parser/#returns_8","text":"Many ref","title":"Returns"},{"location":"peg-Parser/#many1","text":"[Source] fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Parser/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Parser/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Parser/#op_not","text":"[Source] fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Parser/#returns_10","text":"Not ref","title":"Returns"},{"location":"peg-Parser/#op_and","text":"[Source] fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Parser/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Parser/#hide","text":"[Source] fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Parser/#parameters_7","text":"that: Parser box","title":"Parameters"},{"location":"peg-Parser/#returns_12","text":"Hidden ref","title":"Returns"},{"location":"peg-Parser/#term","text":"[Source] fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Parser/#parameters_8","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Parser/#returns_13","text":"Terminal ref","title":"Returns"},{"location":"peg-Parser/#eof","text":"[Source] fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Parser/#returns_14","text":"EndOfFile ref","title":"Returns"},{"location":"peg-PegAnd/","text":"PegAnd \u00b6 [Source] primitive val PegAnd is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegAnd val^ Returns \u00b6 PegAnd val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegAnd val) : Bool val Parameters \u00b6 that: PegAnd val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegAnd val) : Bool val Parameters \u00b6 that: PegAnd val Returns \u00b6 Bool val","title":"primitive PegAnd"},{"location":"peg-PegAnd/#pegand","text":"[Source] primitive val PegAnd is Label val","title":"PegAnd"},{"location":"peg-PegAnd/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegAnd/#constructors","text":"","title":"Constructors"},{"location":"peg-PegAnd/#create","text":"[Source] new val create() : PegAnd val^","title":"create"},{"location":"peg-PegAnd/#returns","text":"PegAnd val^","title":"Returns"},{"location":"peg-PegAnd/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegAnd/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegAnd/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegAnd/#eq","text":"[Source] fun box eq( that: PegAnd val) : Bool val","title":"eq"},{"location":"peg-PegAnd/#parameters","text":"that: PegAnd val","title":"Parameters"},{"location":"peg-PegAnd/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegAnd/#ne","text":"[Source] fun box ne( that: PegAnd val) : Bool val","title":"ne"},{"location":"peg-PegAnd/#parameters_1","text":"that: PegAnd val","title":"Parameters"},{"location":"peg-PegAnd/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegAny/","text":"PegAny \u00b6 [Source] primitive val PegAny is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegAny val^ Returns \u00b6 PegAny val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegAny val) : Bool val Parameters \u00b6 that: PegAny val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegAny val) : Bool val Parameters \u00b6 that: PegAny val Returns \u00b6 Bool val","title":"primitive PegAny"},{"location":"peg-PegAny/#pegany","text":"[Source] primitive val PegAny is Label val","title":"PegAny"},{"location":"peg-PegAny/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegAny/#constructors","text":"","title":"Constructors"},{"location":"peg-PegAny/#create","text":"[Source] new val create() : PegAny val^","title":"create"},{"location":"peg-PegAny/#returns","text":"PegAny val^","title":"Returns"},{"location":"peg-PegAny/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegAny/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegAny/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegAny/#eq","text":"[Source] fun box eq( that: PegAny val) : Bool val","title":"eq"},{"location":"peg-PegAny/#parameters","text":"that: PegAny val","title":"Parameters"},{"location":"peg-PegAny/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegAny/#ne","text":"[Source] fun box ne( that: PegAny val) : Bool val","title":"ne"},{"location":"peg-PegAny/#parameters_1","text":"that: PegAny val","title":"Parameters"},{"location":"peg-PegAny/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegChar/","text":"PegChar \u00b6 [Source] primitive val PegChar is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegChar val^ Returns \u00b6 PegChar val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegChar val) : Bool val Parameters \u00b6 that: PegChar val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegChar val) : Bool val Parameters \u00b6 that: PegChar val Returns \u00b6 Bool val","title":"primitive PegChar"},{"location":"peg-PegChar/#pegchar","text":"[Source] primitive val PegChar is Label val","title":"PegChar"},{"location":"peg-PegChar/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegChar/#constructors","text":"","title":"Constructors"},{"location":"peg-PegChar/#create","text":"[Source] new val create() : PegChar val^","title":"create"},{"location":"peg-PegChar/#returns","text":"PegChar val^","title":"Returns"},{"location":"peg-PegChar/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegChar/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegChar/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegChar/#eq","text":"[Source] fun box eq( that: PegChar val) : Bool val","title":"eq"},{"location":"peg-PegChar/#parameters","text":"that: PegChar val","title":"Parameters"},{"location":"peg-PegChar/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegChar/#ne","text":"[Source] fun box ne( that: PegChar val) : Bool val","title":"ne"},{"location":"peg-PegChar/#parameters_1","text":"that: PegChar val","title":"Parameters"},{"location":"peg-PegChar/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegChoice/","text":"PegChoice \u00b6 [Source] primitive val PegChoice is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegChoice val^ Returns \u00b6 PegChoice val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegChoice val) : Bool val Parameters \u00b6 that: PegChoice val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegChoice val) : Bool val Parameters \u00b6 that: PegChoice val Returns \u00b6 Bool val","title":"primitive PegChoice"},{"location":"peg-PegChoice/#pegchoice","text":"[Source] primitive val PegChoice is Label val","title":"PegChoice"},{"location":"peg-PegChoice/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegChoice/#constructors","text":"","title":"Constructors"},{"location":"peg-PegChoice/#create","text":"[Source] new val create() : PegChoice val^","title":"create"},{"location":"peg-PegChoice/#returns","text":"PegChoice val^","title":"Returns"},{"location":"peg-PegChoice/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegChoice/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegChoice/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegChoice/#eq","text":"[Source] fun box eq( that: PegChoice val) : Bool val","title":"eq"},{"location":"peg-PegChoice/#parameters","text":"that: PegChoice val","title":"Parameters"},{"location":"peg-PegChoice/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegChoice/#ne","text":"[Source] fun box ne( that: PegChoice val) : Bool val","title":"ne"},{"location":"peg-PegChoice/#parameters_1","text":"that: PegChoice val","title":"Parameters"},{"location":"peg-PegChoice/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegCompiler/","text":"PegCompiler \u00b6 [Source] primitive val PegCompiler Constructors \u00b6 create \u00b6 [Source] new val create() : PegCompiler val^ Returns \u00b6 PegCompiler val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( source: Source val) : (Parser box | Array[PegError box] ref) Parameters \u00b6 source: Source val Returns \u00b6 ( Parser box | Array [ PegError box] ref) eq \u00b6 [Source] fun box eq( that: PegCompiler val) : Bool val Parameters \u00b6 that: PegCompiler val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegCompiler val) : Bool val Parameters \u00b6 that: PegCompiler val Returns \u00b6 Bool val","title":"primitive PegCompiler"},{"location":"peg-PegCompiler/#pegcompiler","text":"[Source] primitive val PegCompiler","title":"PegCompiler"},{"location":"peg-PegCompiler/#constructors","text":"","title":"Constructors"},{"location":"peg-PegCompiler/#create","text":"[Source] new val create() : PegCompiler val^","title":"create"},{"location":"peg-PegCompiler/#returns","text":"PegCompiler val^","title":"Returns"},{"location":"peg-PegCompiler/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegCompiler/#apply","text":"[Source] fun box apply( source: Source val) : (Parser box | Array[PegError box] ref)","title":"apply"},{"location":"peg-PegCompiler/#parameters","text":"source: Source val","title":"Parameters"},{"location":"peg-PegCompiler/#returns_1","text":"( Parser box | Array [ PegError box] ref)","title":"Returns"},{"location":"peg-PegCompiler/#eq","text":"[Source] fun box eq( that: PegCompiler val) : Bool val","title":"eq"},{"location":"peg-PegCompiler/#parameters_1","text":"that: PegCompiler val","title":"Parameters"},{"location":"peg-PegCompiler/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegCompiler/#ne","text":"[Source] fun box ne( that: PegCompiler val) : Bool val","title":"ne"},{"location":"peg-PegCompiler/#parameters_2","text":"that: PegCompiler val","title":"Parameters"},{"location":"peg-PegCompiler/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegDef/","text":"PegDef \u00b6 [Source] primitive val PegDef is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegDef val^ Returns \u00b6 PegDef val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegDef val) : Bool val Parameters \u00b6 that: PegDef val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegDef val) : Bool val Parameters \u00b6 that: PegDef val Returns \u00b6 Bool val","title":"primitive PegDef"},{"location":"peg-PegDef/#pegdef","text":"[Source] primitive val PegDef is Label val","title":"PegDef"},{"location":"peg-PegDef/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegDef/#constructors","text":"","title":"Constructors"},{"location":"peg-PegDef/#create","text":"[Source] new val create() : PegDef val^","title":"create"},{"location":"peg-PegDef/#returns","text":"PegDef val^","title":"Returns"},{"location":"peg-PegDef/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegDef/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegDef/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegDef/#eq","text":"[Source] fun box eq( that: PegDef val) : Bool val","title":"eq"},{"location":"peg-PegDef/#parameters","text":"that: PegDef val","title":"Parameters"},{"location":"peg-PegDef/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegDef/#ne","text":"[Source] fun box ne( that: PegDef val) : Bool val","title":"ne"},{"location":"peg-PegDef/#parameters_1","text":"that: PegDef val","title":"Parameters"},{"location":"peg-PegDef/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegError/","text":"PegError \u00b6 [Source] trait box PegError Public Functions \u00b6 category \u00b6 [Source] fun box category() : String val Returns \u00b6 String val description \u00b6 [Source] fun box description() : String val Returns \u00b6 String val markers \u00b6 [Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref Returns \u00b6 Iterator [( Source val , USize val , USize val , String val)] ref","title":"trait PegError"},{"location":"peg-PegError/#pegerror","text":"[Source] trait box PegError","title":"PegError"},{"location":"peg-PegError/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegError/#category","text":"[Source] fun box category() : String val","title":"category"},{"location":"peg-PegError/#returns","text":"String val","title":"Returns"},{"location":"peg-PegError/#description","text":"[Source] fun box description() : String val","title":"description"},{"location":"peg-PegError/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegError/#markers","text":"[Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref","title":"markers"},{"location":"peg-PegError/#returns_2","text":"Iterator [( Source val , USize val , USize val , String val)] ref","title":"Returns"},{"location":"peg-PegFormatError/","text":"PegFormatError \u00b6 [Source] primitive val PegFormatError Constructors \u00b6 create \u00b6 [Source] new val create() : PegFormatError val^ Returns \u00b6 PegFormatError val^ Public Functions \u00b6 console \u00b6 [Source] fun box console( e: PegError val) : ByteSeqIter val Parameters \u00b6 e: PegError val Returns \u00b6 ByteSeqIter val json \u00b6 [Source] fun box json( e: PegError val) : ByteSeqIter val Parameters \u00b6 e: PegError val Returns \u00b6 ByteSeqIter val eq \u00b6 [Source] fun box eq( that: PegFormatError val) : Bool val Parameters \u00b6 that: PegFormatError val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegFormatError val) : Bool val Parameters \u00b6 that: PegFormatError val Returns \u00b6 Bool val","title":"primitive PegFormatError"},{"location":"peg-PegFormatError/#pegformaterror","text":"[Source] primitive val PegFormatError","title":"PegFormatError"},{"location":"peg-PegFormatError/#constructors","text":"","title":"Constructors"},{"location":"peg-PegFormatError/#create","text":"[Source] new val create() : PegFormatError val^","title":"create"},{"location":"peg-PegFormatError/#returns","text":"PegFormatError val^","title":"Returns"},{"location":"peg-PegFormatError/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegFormatError/#console","text":"[Source] fun box console( e: PegError val) : ByteSeqIter val","title":"console"},{"location":"peg-PegFormatError/#parameters","text":"e: PegError val","title":"Parameters"},{"location":"peg-PegFormatError/#returns_1","text":"ByteSeqIter val","title":"Returns"},{"location":"peg-PegFormatError/#json","text":"[Source] fun box json( e: PegError val) : ByteSeqIter val","title":"json"},{"location":"peg-PegFormatError/#parameters_1","text":"e: PegError val","title":"Parameters"},{"location":"peg-PegFormatError/#returns_2","text":"ByteSeqIter val","title":"Returns"},{"location":"peg-PegFormatError/#eq","text":"[Source] fun box eq( that: PegFormatError val) : Bool val","title":"eq"},{"location":"peg-PegFormatError/#parameters_2","text":"that: PegFormatError val","title":"Parameters"},{"location":"peg-PegFormatError/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegFormatError/#ne","text":"[Source] fun box ne( that: PegFormatError val) : Bool val","title":"ne"},{"location":"peg-PegFormatError/#parameters_3","text":"that: PegFormatError val","title":"Parameters"},{"location":"peg-PegFormatError/#returns_4","text":"Bool val","title":"Returns"},{"location":"peg-PegGrammar/","text":"PegGrammar \u00b6 [Source] primitive val PegGrammar is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegGrammar val^ Returns \u00b6 PegGrammar val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegGrammar val) : Bool val Parameters \u00b6 that: PegGrammar val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegGrammar val) : Bool val Parameters \u00b6 that: PegGrammar val Returns \u00b6 Bool val","title":"primitive PegGrammar"},{"location":"peg-PegGrammar/#peggrammar","text":"[Source] primitive val PegGrammar is Label val","title":"PegGrammar"},{"location":"peg-PegGrammar/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegGrammar/#constructors","text":"","title":"Constructors"},{"location":"peg-PegGrammar/#create","text":"[Source] new val create() : PegGrammar val^","title":"create"},{"location":"peg-PegGrammar/#returns","text":"PegGrammar val^","title":"Returns"},{"location":"peg-PegGrammar/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegGrammar/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegGrammar/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegGrammar/#eq","text":"[Source] fun box eq( that: PegGrammar val) : Bool val","title":"eq"},{"location":"peg-PegGrammar/#parameters","text":"that: PegGrammar val","title":"Parameters"},{"location":"peg-PegGrammar/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegGrammar/#ne","text":"[Source] fun box ne( that: PegGrammar val) : Bool val","title":"ne"},{"location":"peg-PegGrammar/#parameters_1","text":"that: PegGrammar val","title":"Parameters"},{"location":"peg-PegGrammar/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegIdent/","text":"PegIdent \u00b6 [Source] primitive val PegIdent is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegIdent val^ Returns \u00b6 PegIdent val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegIdent val) : Bool val Parameters \u00b6 that: PegIdent val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegIdent val) : Bool val Parameters \u00b6 that: PegIdent val Returns \u00b6 Bool val","title":"primitive PegIdent"},{"location":"peg-PegIdent/#pegident","text":"[Source] primitive val PegIdent is Label val","title":"PegIdent"},{"location":"peg-PegIdent/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegIdent/#constructors","text":"","title":"Constructors"},{"location":"peg-PegIdent/#create","text":"[Source] new val create() : PegIdent val^","title":"create"},{"location":"peg-PegIdent/#returns","text":"PegIdent val^","title":"Returns"},{"location":"peg-PegIdent/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegIdent/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegIdent/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegIdent/#eq","text":"[Source] fun box eq( that: PegIdent val) : Bool val","title":"eq"},{"location":"peg-PegIdent/#parameters","text":"that: PegIdent val","title":"Parameters"},{"location":"peg-PegIdent/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegIdent/#ne","text":"[Source] fun box ne( that: PegIdent val) : Bool val","title":"ne"},{"location":"peg-PegIdent/#parameters_1","text":"that: PegIdent val","title":"Parameters"},{"location":"peg-PegIdent/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegLabel/","text":"PegLabel \u00b6 [Source] class val PegLabel is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create( text': String val) : PegLabel val^ Parameters \u00b6 text': String val Returns \u00b6 PegLabel val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val","title":"class PegLabel"},{"location":"peg-PegLabel/#peglabel","text":"[Source] class val PegLabel is Label val","title":"PegLabel"},{"location":"peg-PegLabel/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegLabel/#constructors","text":"","title":"Constructors"},{"location":"peg-PegLabel/#create","text":"[Source] new val create( text': String val) : PegLabel val^","title":"create"},{"location":"peg-PegLabel/#parameters","text":"text': String val","title":"Parameters"},{"location":"peg-PegLabel/#returns","text":"PegLabel val^","title":"Returns"},{"location":"peg-PegLabel/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegLabel/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegLabel/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegMany/","text":"PegMany \u00b6 [Source] primitive val PegMany is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegMany val^ Returns \u00b6 PegMany val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegMany val) : Bool val Parameters \u00b6 that: PegMany val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegMany val) : Bool val Parameters \u00b6 that: PegMany val Returns \u00b6 Bool val","title":"primitive PegMany"},{"location":"peg-PegMany/#pegmany","text":"[Source] primitive val PegMany is Label val","title":"PegMany"},{"location":"peg-PegMany/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegMany/#constructors","text":"","title":"Constructors"},{"location":"peg-PegMany/#create","text":"[Source] new val create() : PegMany val^","title":"create"},{"location":"peg-PegMany/#returns","text":"PegMany val^","title":"Returns"},{"location":"peg-PegMany/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegMany/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegMany/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegMany/#eq","text":"[Source] fun box eq( that: PegMany val) : Bool val","title":"eq"},{"location":"peg-PegMany/#parameters","text":"that: PegMany val","title":"Parameters"},{"location":"peg-PegMany/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegMany/#ne","text":"[Source] fun box ne( that: PegMany val) : Bool val","title":"ne"},{"location":"peg-PegMany/#parameters_1","text":"that: PegMany val","title":"Parameters"},{"location":"peg-PegMany/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegMany1/","text":"PegMany1 \u00b6 [Source] primitive val PegMany1 is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegMany1 val^ Returns \u00b6 PegMany1 val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegMany1 val) : Bool val Parameters \u00b6 that: PegMany1 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegMany1 val) : Bool val Parameters \u00b6 that: PegMany1 val Returns \u00b6 Bool val","title":"primitive PegMany1"},{"location":"peg-PegMany1/#pegmany1","text":"[Source] primitive val PegMany1 is Label val","title":"PegMany1"},{"location":"peg-PegMany1/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegMany1/#constructors","text":"","title":"Constructors"},{"location":"peg-PegMany1/#create","text":"[Source] new val create() : PegMany1 val^","title":"create"},{"location":"peg-PegMany1/#returns","text":"PegMany1 val^","title":"Returns"},{"location":"peg-PegMany1/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegMany1/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegMany1/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegMany1/#eq","text":"[Source] fun box eq( that: PegMany1 val) : Bool val","title":"eq"},{"location":"peg-PegMany1/#parameters","text":"that: PegMany1 val","title":"Parameters"},{"location":"peg-PegMany1/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegMany1/#ne","text":"[Source] fun box ne( that: PegMany1 val) : Bool val","title":"ne"},{"location":"peg-PegMany1/#parameters_1","text":"that: PegMany1 val","title":"Parameters"},{"location":"peg-PegMany1/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegNot/","text":"PegNot \u00b6 [Source] primitive val PegNot is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegNot val^ Returns \u00b6 PegNot val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegNot val) : Bool val Parameters \u00b6 that: PegNot val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegNot val) : Bool val Parameters \u00b6 that: PegNot val Returns \u00b6 Bool val","title":"primitive PegNot"},{"location":"peg-PegNot/#pegnot","text":"[Source] primitive val PegNot is Label val","title":"PegNot"},{"location":"peg-PegNot/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegNot/#constructors","text":"","title":"Constructors"},{"location":"peg-PegNot/#create","text":"[Source] new val create() : PegNot val^","title":"create"},{"location":"peg-PegNot/#returns","text":"PegNot val^","title":"Returns"},{"location":"peg-PegNot/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegNot/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegNot/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegNot/#eq","text":"[Source] fun box eq( that: PegNot val) : Bool val","title":"eq"},{"location":"peg-PegNot/#parameters","text":"that: PegNot val","title":"Parameters"},{"location":"peg-PegNot/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegNot/#ne","text":"[Source] fun box ne( that: PegNot val) : Bool val","title":"ne"},{"location":"peg-PegNot/#parameters_1","text":"that: PegNot val","title":"Parameters"},{"location":"peg-PegNot/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegOpt/","text":"PegOpt \u00b6 [Source] primitive val PegOpt is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegOpt val^ Returns \u00b6 PegOpt val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegOpt val) : Bool val Parameters \u00b6 that: PegOpt val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegOpt val) : Bool val Parameters \u00b6 that: PegOpt val Returns \u00b6 Bool val","title":"primitive PegOpt"},{"location":"peg-PegOpt/#pegopt","text":"[Source] primitive val PegOpt is Label val","title":"PegOpt"},{"location":"peg-PegOpt/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegOpt/#constructors","text":"","title":"Constructors"},{"location":"peg-PegOpt/#create","text":"[Source] new val create() : PegOpt val^","title":"create"},{"location":"peg-PegOpt/#returns","text":"PegOpt val^","title":"Returns"},{"location":"peg-PegOpt/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegOpt/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegOpt/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegOpt/#eq","text":"[Source] fun box eq( that: PegOpt val) : Bool val","title":"eq"},{"location":"peg-PegOpt/#parameters","text":"that: PegOpt val","title":"Parameters"},{"location":"peg-PegOpt/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegOpt/#ne","text":"[Source] fun box ne( that: PegOpt val) : Bool val","title":"ne"},{"location":"peg-PegOpt/#parameters_1","text":"that: PegOpt val","title":"Parameters"},{"location":"peg-PegOpt/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegParser/","text":"PegParser \u00b6 [Source] primitive val PegParser Constructors \u00b6 create \u00b6 [Source] new val create() : PegParser val^ Returns \u00b6 PegParser val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply() : Parser val Returns \u00b6 Parser val eq \u00b6 [Source] fun box eq( that: PegParser val) : Bool val Parameters \u00b6 that: PegParser val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegParser val) : Bool val Parameters \u00b6 that: PegParser val Returns \u00b6 Bool val","title":"primitive PegParser"},{"location":"peg-PegParser/#pegparser","text":"[Source] primitive val PegParser","title":"PegParser"},{"location":"peg-PegParser/#constructors","text":"","title":"Constructors"},{"location":"peg-PegParser/#create","text":"[Source] new val create() : PegParser val^","title":"create"},{"location":"peg-PegParser/#returns","text":"PegParser val^","title":"Returns"},{"location":"peg-PegParser/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegParser/#apply","text":"[Source] fun box apply() : Parser val","title":"apply"},{"location":"peg-PegParser/#returns_1","text":"Parser val","title":"Returns"},{"location":"peg-PegParser/#eq","text":"[Source] fun box eq( that: PegParser val) : Bool val","title":"eq"},{"location":"peg-PegParser/#parameters","text":"that: PegParser val","title":"Parameters"},{"location":"peg-PegParser/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegParser/#ne","text":"[Source] fun box ne( that: PegParser val) : Bool val","title":"ne"},{"location":"peg-PegParser/#parameters_1","text":"that: PegParser val","title":"Parameters"},{"location":"peg-PegParser/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegRange/","text":"PegRange \u00b6 [Source] primitive val PegRange is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegRange val^ Returns \u00b6 PegRange val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegRange val) : Bool val Parameters \u00b6 that: PegRange val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegRange val) : Bool val Parameters \u00b6 that: PegRange val Returns \u00b6 Bool val","title":"primitive PegRange"},{"location":"peg-PegRange/#pegrange","text":"[Source] primitive val PegRange is Label val","title":"PegRange"},{"location":"peg-PegRange/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegRange/#constructors","text":"","title":"Constructors"},{"location":"peg-PegRange/#create","text":"[Source] new val create() : PegRange val^","title":"create"},{"location":"peg-PegRange/#returns","text":"PegRange val^","title":"Returns"},{"location":"peg-PegRange/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegRange/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegRange/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegRange/#eq","text":"[Source] fun box eq( that: PegRange val) : Bool val","title":"eq"},{"location":"peg-PegRange/#parameters","text":"that: PegRange val","title":"Parameters"},{"location":"peg-PegRange/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegRange/#ne","text":"[Source] fun box ne( that: PegRange val) : Bool val","title":"ne"},{"location":"peg-PegRange/#parameters_1","text":"that: PegRange val","title":"Parameters"},{"location":"peg-PegRange/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegSep/","text":"PegSep \u00b6 [Source] primitive val PegSep is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegSep val^ Returns \u00b6 PegSep val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegSep val) : Bool val Parameters \u00b6 that: PegSep val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegSep val) : Bool val Parameters \u00b6 that: PegSep val Returns \u00b6 Bool val","title":"primitive PegSep"},{"location":"peg-PegSep/#pegsep","text":"[Source] primitive val PegSep is Label val","title":"PegSep"},{"location":"peg-PegSep/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegSep/#constructors","text":"","title":"Constructors"},{"location":"peg-PegSep/#create","text":"[Source] new val create() : PegSep val^","title":"create"},{"location":"peg-PegSep/#returns","text":"PegSep val^","title":"Returns"},{"location":"peg-PegSep/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegSep/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegSep/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegSep/#eq","text":"[Source] fun box eq( that: PegSep val) : Bool val","title":"eq"},{"location":"peg-PegSep/#parameters","text":"that: PegSep val","title":"Parameters"},{"location":"peg-PegSep/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegSep/#ne","text":"[Source] fun box ne( that: PegSep val) : Bool val","title":"ne"},{"location":"peg-PegSep/#parameters_1","text":"that: PegSep val","title":"Parameters"},{"location":"peg-PegSep/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegSep1/","text":"PegSep1 \u00b6 [Source] primitive val PegSep1 is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegSep1 val^ Returns \u00b6 PegSep1 val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegSep1 val) : Bool val Parameters \u00b6 that: PegSep1 val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegSep1 val) : Bool val Parameters \u00b6 that: PegSep1 val Returns \u00b6 Bool val","title":"primitive PegSep1"},{"location":"peg-PegSep1/#pegsep1","text":"[Source] primitive val PegSep1 is Label val","title":"PegSep1"},{"location":"peg-PegSep1/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegSep1/#constructors","text":"","title":"Constructors"},{"location":"peg-PegSep1/#create","text":"[Source] new val create() : PegSep1 val^","title":"create"},{"location":"peg-PegSep1/#returns","text":"PegSep1 val^","title":"Returns"},{"location":"peg-PegSep1/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegSep1/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegSep1/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegSep1/#eq","text":"[Source] fun box eq( that: PegSep1 val) : Bool val","title":"eq"},{"location":"peg-PegSep1/#parameters","text":"that: PegSep1 val","title":"Parameters"},{"location":"peg-PegSep1/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegSep1/#ne","text":"[Source] fun box ne( that: PegSep1 val) : Bool val","title":"ne"},{"location":"peg-PegSep1/#parameters_1","text":"that: PegSep1 val","title":"Parameters"},{"location":"peg-PegSep1/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegSeq/","text":"PegSeq \u00b6 [Source] primitive val PegSeq is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegSeq val^ Returns \u00b6 PegSeq val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegSeq val) : Bool val Parameters \u00b6 that: PegSeq val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegSeq val) : Bool val Parameters \u00b6 that: PegSeq val Returns \u00b6 Bool val","title":"primitive PegSeq"},{"location":"peg-PegSeq/#pegseq","text":"[Source] primitive val PegSeq is Label val","title":"PegSeq"},{"location":"peg-PegSeq/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegSeq/#constructors","text":"","title":"Constructors"},{"location":"peg-PegSeq/#create","text":"[Source] new val create() : PegSeq val^","title":"create"},{"location":"peg-PegSeq/#returns","text":"PegSeq val^","title":"Returns"},{"location":"peg-PegSeq/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegSeq/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegSeq/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegSeq/#eq","text":"[Source] fun box eq( that: PegSeq val) : Bool val","title":"eq"},{"location":"peg-PegSeq/#parameters","text":"that: PegSeq val","title":"Parameters"},{"location":"peg-PegSeq/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegSeq/#ne","text":"[Source] fun box ne( that: PegSeq val) : Bool val","title":"ne"},{"location":"peg-PegSeq/#parameters_1","text":"that: PegSeq val","title":"Parameters"},{"location":"peg-PegSeq/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegSkip/","text":"PegSkip \u00b6 [Source] primitive val PegSkip is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegSkip val^ Returns \u00b6 PegSkip val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegSkip val) : Bool val Parameters \u00b6 that: PegSkip val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegSkip val) : Bool val Parameters \u00b6 that: PegSkip val Returns \u00b6 Bool val","title":"primitive PegSkip"},{"location":"peg-PegSkip/#pegskip","text":"[Source] primitive val PegSkip is Label val","title":"PegSkip"},{"location":"peg-PegSkip/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegSkip/#constructors","text":"","title":"Constructors"},{"location":"peg-PegSkip/#create","text":"[Source] new val create() : PegSkip val^","title":"create"},{"location":"peg-PegSkip/#returns","text":"PegSkip val^","title":"Returns"},{"location":"peg-PegSkip/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegSkip/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegSkip/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegSkip/#eq","text":"[Source] fun box eq( that: PegSkip val) : Bool val","title":"eq"},{"location":"peg-PegSkip/#parameters","text":"that: PegSkip val","title":"Parameters"},{"location":"peg-PegSkip/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegSkip/#ne","text":"[Source] fun box ne( that: PegSkip val) : Bool val","title":"ne"},{"location":"peg-PegSkip/#parameters_1","text":"that: PegSkip val","title":"Parameters"},{"location":"peg-PegSkip/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-PegString/","text":"PegString \u00b6 [Source] primitive val PegString is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : PegString val^ Returns \u00b6 PegString val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: PegString val) : Bool val Parameters \u00b6 that: PegString val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: PegString val) : Bool val Parameters \u00b6 that: PegString val Returns \u00b6 Bool val","title":"primitive PegString"},{"location":"peg-PegString/#pegstring","text":"[Source] primitive val PegString is Label val","title":"PegString"},{"location":"peg-PegString/#implements","text":"Label val","title":"Implements"},{"location":"peg-PegString/#constructors","text":"","title":"Constructors"},{"location":"peg-PegString/#create","text":"[Source] new val create() : PegString val^","title":"create"},{"location":"peg-PegString/#returns","text":"PegString val^","title":"Returns"},{"location":"peg-PegString/#public-functions","text":"","title":"Public Functions"},{"location":"peg-PegString/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-PegString/#returns_1","text":"String val","title":"Returns"},{"location":"peg-PegString/#eq","text":"[Source] fun box eq( that: PegString val) : Bool val","title":"eq"},{"location":"peg-PegString/#parameters","text":"that: PegString val","title":"Parameters"},{"location":"peg-PegString/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-PegString/#ne","text":"[Source] fun box ne( that: PegString val) : Bool val","title":"ne"},{"location":"peg-PegString/#parameters_1","text":"that: PegString val","title":"Parameters"},{"location":"peg-PegString/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-Position/","text":"Position \u00b6 [Source] primitive val Position Constructors \u00b6 create \u00b6 [Source] new val create() : Position val^ Returns \u00b6 Position val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( source: Source val, offset: USize val) : (USize val , USize val) Parameters \u00b6 source: Source val offset: USize val Returns \u00b6 ( USize val , USize val) text \u00b6 [Source] fun box text( source: Source val, offset: USize val, col: USize val) : String val Parameters \u00b6 source: Source val offset: USize val col: USize val Returns \u00b6 String val indent \u00b6 [Source] fun box indent( line: String val, col: USize val) : String val Parameters \u00b6 line: String val col: USize val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: Position val) : Bool val Parameters \u00b6 that: Position val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Position val) : Bool val Parameters \u00b6 that: Position val Returns \u00b6 Bool val","title":"primitive Position"},{"location":"peg-Position/#position","text":"[Source] primitive val Position","title":"Position"},{"location":"peg-Position/#constructors","text":"","title":"Constructors"},{"location":"peg-Position/#create","text":"[Source] new val create() : Position val^","title":"create"},{"location":"peg-Position/#returns","text":"Position val^","title":"Returns"},{"location":"peg-Position/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Position/#apply","text":"[Source] fun box apply( source: Source val, offset: USize val) : (USize val , USize val)","title":"apply"},{"location":"peg-Position/#parameters","text":"source: Source val offset: USize val","title":"Parameters"},{"location":"peg-Position/#returns_1","text":"( USize val , USize val)","title":"Returns"},{"location":"peg-Position/#text","text":"[Source] fun box text( source: Source val, offset: USize val, col: USize val) : String val","title":"text"},{"location":"peg-Position/#parameters_1","text":"source: Source val offset: USize val col: USize val","title":"Parameters"},{"location":"peg-Position/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Position/#indent","text":"[Source] fun box indent( line: String val, col: USize val) : String val","title":"indent"},{"location":"peg-Position/#parameters_2","text":"line: String val col: USize val","title":"Parameters"},{"location":"peg-Position/#returns_3","text":"String val","title":"Returns"},{"location":"peg-Position/#eq","text":"[Source] fun box eq( that: Position val) : Bool val","title":"eq"},{"location":"peg-Position/#parameters_3","text":"that: Position val","title":"Parameters"},{"location":"peg-Position/#returns_4","text":"Bool val","title":"Returns"},{"location":"peg-Position/#ne","text":"[Source] fun box ne( that: Position val) : Bool val","title":"ne"},{"location":"peg-Position/#parameters_4","text":"that: Position val","title":"Parameters"},{"location":"peg-Position/#returns_5","text":"Bool val","title":"Returns"},{"location":"peg-Printer/","text":"Printer \u00b6 [Source] primitive val Printer Constructors \u00b6 create \u00b6 [Source] new val create() : Printer val^ Returns \u00b6 Printer val^ Public Functions \u00b6 apply \u00b6 [Source] fun box apply( p: (AST val | Token val | NotPresent val), depth: USize val = 0, indent: String val = \" \", s: String ref = reference) : String ref Parameters \u00b6 p: ( AST val | Token val | NotPresent val) depth: USize val = 0 indent: String val = \" \" s: String ref = reference Returns \u00b6 String ref eq \u00b6 [Source] fun box eq( that: Printer val) : Bool val Parameters \u00b6 that: Printer val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Printer val) : Bool val Parameters \u00b6 that: Printer val Returns \u00b6 Bool val","title":"primitive Printer"},{"location":"peg-Printer/#printer","text":"[Source] primitive val Printer","title":"Printer"},{"location":"peg-Printer/#constructors","text":"","title":"Constructors"},{"location":"peg-Printer/#create","text":"[Source] new val create() : Printer val^","title":"create"},{"location":"peg-Printer/#returns","text":"Printer val^","title":"Returns"},{"location":"peg-Printer/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Printer/#apply","text":"[Source] fun box apply( p: (AST val | Token val | NotPresent val), depth: USize val = 0, indent: String val = \" \", s: String ref = reference) : String ref","title":"apply"},{"location":"peg-Printer/#parameters","text":"p: ( AST val | Token val | NotPresent val) depth: USize val = 0 indent: String val = \" \" s: String ref = reference","title":"Parameters"},{"location":"peg-Printer/#returns_1","text":"String ref","title":"Returns"},{"location":"peg-Printer/#eq","text":"[Source] fun box eq( that: Printer val) : Bool val","title":"eq"},{"location":"peg-Printer/#parameters_1","text":"that: Printer val","title":"Parameters"},{"location":"peg-Printer/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-Printer/#ne","text":"[Source] fun box ne( that: Printer val) : Bool val","title":"ne"},{"location":"peg-Printer/#parameters_2","text":"that: Printer val","title":"Parameters"},{"location":"peg-Printer/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-R/","text":"R \u00b6 [Source] type R is UnicodeRange ref Type Alias For \u00b6 UnicodeRange ref","title":"type R"},{"location":"peg-R/#r","text":"[Source] type R is UnicodeRange ref","title":"R"},{"location":"peg-R/#type-alias-for","text":"UnicodeRange ref","title":"Type Alias For"},{"location":"peg-Sequence/","text":"Sequence \u00b6 [Source] class ref Sequence is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box, b: Parser box) : Sequence ref^ Parameters \u00b6 a: Parser box b: Parser box Returns \u00b6 Sequence ref^ concat \u00b6 [Source] new ref concat( a: Sequence box, b: Parser box) : Sequence ref^ Parameters \u00b6 a: Sequence box b: Parser box Returns \u00b6 Sequence ref^ Public Functions \u00b6 label \u00b6 [Source] fun box label() : Label val Returns \u00b6 Label val node \u00b6 [Source] fun ref node( value: Label val) : Sequence ref Parameters \u00b6 value: Label val Returns \u00b6 Sequence ref mul \u00b6 [Source] fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) div \u00b6 fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Sequence"},{"location":"peg-Sequence/#sequence","text":"[Source] class ref Sequence is Parser box","title":"Sequence"},{"location":"peg-Sequence/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Sequence/#constructors","text":"","title":"Constructors"},{"location":"peg-Sequence/#create","text":"[Source] new ref create( a: Parser box, b: Parser box) : Sequence ref^","title":"create"},{"location":"peg-Sequence/#parameters","text":"a: Parser box b: Parser box","title":"Parameters"},{"location":"peg-Sequence/#returns","text":"Sequence ref^","title":"Returns"},{"location":"peg-Sequence/#concat","text":"[Source] new ref concat( a: Sequence box, b: Parser box) : Sequence ref^","title":"concat"},{"location":"peg-Sequence/#parameters_1","text":"a: Sequence box b: Parser box","title":"Parameters"},{"location":"peg-Sequence/#returns_1","text":"Sequence ref^","title":"Returns"},{"location":"peg-Sequence/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Sequence/#label","text":"[Source] fun box label() : Label val","title":"label"},{"location":"peg-Sequence/#returns_2","text":"Label val","title":"Returns"},{"location":"peg-Sequence/#node","text":"[Source] fun ref node( value: Label val) : Sequence ref","title":"node"},{"location":"peg-Sequence/#parameters_2","text":"value: Label val","title":"Parameters"},{"location":"peg-Sequence/#returns_3","text":"Sequence ref","title":"Returns"},{"location":"peg-Sequence/#mul","text":"[Source] fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Sequence/#parameters_3","text":"that: Parser box","title":"Parameters"},{"location":"peg-Sequence/#returns_4","text":"Sequence ref","title":"Returns"},{"location":"peg-Sequence/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Sequence/#parameters_4","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Sequence/#returns_5","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Sequence/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Sequence/#returns_6","text":"String val","title":"Returns"},{"location":"peg-Sequence/#skip_hidden","text":"fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Sequence/#parameters_5","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Sequence/#returns_7","text":"USize val","title":"Returns"},{"location":"peg-Sequence/#result","text":"fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Sequence/#parameters_6","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Sequence/#returns_8","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Sequence/#div","text":"fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Sequence/#parameters_7","text":"that: Parser box","title":"Parameters"},{"location":"peg-Sequence/#returns_9","text":"Choice ref","title":"Returns"},{"location":"peg-Sequence/#neg","text":"fun box neg() : Skip ref","title":"neg"},{"location":"peg-Sequence/#returns_10","text":"Skip ref","title":"Returns"},{"location":"peg-Sequence/#opt","text":"fun box opt() : Option ref","title":"opt"},{"location":"peg-Sequence/#returns_11","text":"Option ref","title":"Returns"},{"location":"peg-Sequence/#many","text":"fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Sequence/#parameters_8","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Sequence/#returns_12","text":"Many ref","title":"Returns"},{"location":"peg-Sequence/#many1","text":"fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Sequence/#parameters_9","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Sequence/#returns_13","text":"Many ref","title":"Returns"},{"location":"peg-Sequence/#op_not","text":"fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Sequence/#returns_14","text":"Not ref","title":"Returns"},{"location":"peg-Sequence/#op_and","text":"fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Sequence/#returns_15","text":"Not ref","title":"Returns"},{"location":"peg-Sequence/#hide","text":"fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Sequence/#parameters_10","text":"that: Parser box","title":"Parameters"},{"location":"peg-Sequence/#returns_16","text":"Hidden ref","title":"Returns"},{"location":"peg-Sequence/#term","text":"fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Sequence/#parameters_11","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Sequence/#returns_17","text":"Terminal ref","title":"Returns"},{"location":"peg-Sequence/#eof","text":"fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Sequence/#returns_18","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Skip/","text":"Skip \u00b6 [Source] class ref Skip is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box) : Skip ref^ Parameters \u00b6 a: Parser box Returns \u00b6 Skip ref^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Skip"},{"location":"peg-Skip/#skip","text":"[Source] class ref Skip is Parser box","title":"Skip"},{"location":"peg-Skip/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Skip/#constructors","text":"","title":"Constructors"},{"location":"peg-Skip/#create","text":"[Source] new ref create( a: Parser box) : Skip ref^","title":"create"},{"location":"peg-Skip/#parameters","text":"a: Parser box","title":"Parameters"},{"location":"peg-Skip/#returns","text":"Skip ref^","title":"Returns"},{"location":"peg-Skip/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Skip/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Skip/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Skip/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Skip/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Skip/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Skip/#skip_hidden","text":"fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Skip/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Skip/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-Skip/#result","text":"fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Skip/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Skip/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Skip/#mul","text":"fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Skip/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Skip/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-Skip/#div","text":"fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Skip/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Skip/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-Skip/#neg","text":"fun box neg() : Skip ref","title":"neg"},{"location":"peg-Skip/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-Skip/#opt","text":"fun box opt() : Option ref","title":"opt"},{"location":"peg-Skip/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-Skip/#many","text":"fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Skip/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Skip/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Skip/#many1","text":"fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Skip/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Skip/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Skip/#op_not","text":"fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Skip/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Skip/#op_and","text":"fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Skip/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Skip/#hide","text":"fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Skip/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-Skip/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-Skip/#term","text":"fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Skip/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Skip/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-Skip/#eof","text":"fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Skip/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Skipped/","text":"Skipped \u00b6 [Source] Returned by Skip when the parse is found, and Not when the parse isn't found. primitive val Skipped Constructors \u00b6 create \u00b6 [Source] new val create() : Skipped val^ Returns \u00b6 Skipped val^ Public Functions \u00b6 eq \u00b6 [Source] fun box eq( that: Skipped val) : Bool val Parameters \u00b6 that: Skipped val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Skipped val) : Bool val Parameters \u00b6 that: Skipped val Returns \u00b6 Bool val","title":"primitive Skipped"},{"location":"peg-Skipped/#skipped","text":"[Source] Returned by Skip when the parse is found, and Not when the parse isn't found. primitive val Skipped","title":"Skipped"},{"location":"peg-Skipped/#constructors","text":"","title":"Constructors"},{"location":"peg-Skipped/#create","text":"[Source] new val create() : Skipped val^","title":"create"},{"location":"peg-Skipped/#returns","text":"Skipped val^","title":"Returns"},{"location":"peg-Skipped/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Skipped/#eq","text":"[Source] fun box eq( that: Skipped val) : Bool val","title":"eq"},{"location":"peg-Skipped/#parameters","text":"that: Skipped val","title":"Parameters"},{"location":"peg-Skipped/#returns_1","text":"Bool val","title":"Returns"},{"location":"peg-Skipped/#ne","text":"[Source] fun box ne( that: Skipped val) : Bool val","title":"ne"},{"location":"peg-Skipped/#parameters_1","text":"that: Skipped val","title":"Parameters"},{"location":"peg-Skipped/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-Source/","text":"Source \u00b6 [Source] class val Source Constructors \u00b6 create \u00b6 [Source] new val create( filepath: FilePath val) : Source val^ ? Parameters \u00b6 filepath: FilePath val Returns \u00b6 Source val^ ? from_string \u00b6 [Source] new val from_string( content': String val, path': String val = \"\") : Source val^ Parameters \u00b6 content': String val path': String val = \"\" Returns \u00b6 Source val^ Public fields \u00b6 let path: String val \u00b6 [Source] let content: String val \u00b6 [Source]","title":"class Source"},{"location":"peg-Source/#source","text":"[Source] class val Source","title":"Source"},{"location":"peg-Source/#constructors","text":"","title":"Constructors"},{"location":"peg-Source/#create","text":"[Source] new val create( filepath: FilePath val) : Source val^ ?","title":"create"},{"location":"peg-Source/#parameters","text":"filepath: FilePath val","title":"Parameters"},{"location":"peg-Source/#returns","text":"Source val^ ?","title":"Returns"},{"location":"peg-Source/#from_string","text":"[Source] new val from_string( content': String val, path': String val = \"\") : Source val^","title":"from_string"},{"location":"peg-Source/#parameters_1","text":"content': String val path': String val = \"\"","title":"Parameters"},{"location":"peg-Source/#returns_1","text":"Source val^","title":"Returns"},{"location":"peg-Source/#public-fields","text":"","title":"Public fields"},{"location":"peg-Source/#let-path-string-val","text":"[Source]","title":"let path: String val"},{"location":"peg-Source/#let-content-string-val","text":"[Source]","title":"let content: String val"},{"location":"peg-SyntaxError/","text":"SyntaxError \u00b6 [Source] class ref SyntaxError is PegError box Implements \u00b6 PegError box Constructors \u00b6 create \u00b6 [Source] new ref create( source': Source val, offset': USize val, parser': Parser box) : SyntaxError ref^ Parameters \u00b6 source': Source val offset': USize val parser': Parser box Returns \u00b6 SyntaxError ref^ Public fields \u00b6 let source: Source val \u00b6 [Source] let offset: USize val \u00b6 [Source] let parser: Parser box \u00b6 [Source] Public Functions \u00b6 category \u00b6 [Source] fun box category() : String val Returns \u00b6 String val description \u00b6 [Source] fun box description() : String val Returns \u00b6 String val markers \u00b6 [Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref Returns \u00b6 Iterator [( Source val , USize val , USize val , String val)] ref","title":"class SyntaxError"},{"location":"peg-SyntaxError/#syntaxerror","text":"[Source] class ref SyntaxError is PegError box","title":"SyntaxError"},{"location":"peg-SyntaxError/#implements","text":"PegError box","title":"Implements"},{"location":"peg-SyntaxError/#constructors","text":"","title":"Constructors"},{"location":"peg-SyntaxError/#create","text":"[Source] new ref create( source': Source val, offset': USize val, parser': Parser box) : SyntaxError ref^","title":"create"},{"location":"peg-SyntaxError/#parameters","text":"source': Source val offset': USize val parser': Parser box","title":"Parameters"},{"location":"peg-SyntaxError/#returns","text":"SyntaxError ref^","title":"Returns"},{"location":"peg-SyntaxError/#public-fields","text":"","title":"Public fields"},{"location":"peg-SyntaxError/#let-source-source-val","text":"[Source]","title":"let source: Source val"},{"location":"peg-SyntaxError/#let-offset-usize-val","text":"[Source]","title":"let offset: USize val"},{"location":"peg-SyntaxError/#let-parser-parser-box","text":"[Source]","title":"let parser: Parser box"},{"location":"peg-SyntaxError/#public-functions","text":"","title":"Public Functions"},{"location":"peg-SyntaxError/#category","text":"[Source] fun box category() : String val","title":"category"},{"location":"peg-SyntaxError/#returns_1","text":"String val","title":"Returns"},{"location":"peg-SyntaxError/#description","text":"[Source] fun box description() : String val","title":"description"},{"location":"peg-SyntaxError/#returns_2","text":"String val","title":"Returns"},{"location":"peg-SyntaxError/#markers","text":"[Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref","title":"markers"},{"location":"peg-SyntaxError/#returns_3","text":"Iterator [( Source val , USize val , USize val , String val)] ref","title":"Returns"},{"location":"peg-TArray/","text":"TArray \u00b6 [Source] primitive val TArray is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : TArray val^ Returns \u00b6 TArray val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: TArray val) : Bool val Parameters \u00b6 that: TArray val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TArray val) : Bool val Parameters \u00b6 that: TArray val Returns \u00b6 Bool val","title":"primitive TArray"},{"location":"peg-TArray/#tarray","text":"[Source] primitive val TArray is Label val","title":"TArray"},{"location":"peg-TArray/#implements","text":"Label val","title":"Implements"},{"location":"peg-TArray/#constructors","text":"","title":"Constructors"},{"location":"peg-TArray/#create","text":"[Source] new val create() : TArray val^","title":"create"},{"location":"peg-TArray/#returns","text":"TArray val^","title":"Returns"},{"location":"peg-TArray/#public-functions","text":"","title":"Public Functions"},{"location":"peg-TArray/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-TArray/#returns_1","text":"String val","title":"Returns"},{"location":"peg-TArray/#eq","text":"[Source] fun box eq( that: TArray val) : Bool val","title":"eq"},{"location":"peg-TArray/#parameters","text":"that: TArray val","title":"Parameters"},{"location":"peg-TArray/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-TArray/#ne","text":"[Source] fun box ne( that: TArray val) : Bool val","title":"ne"},{"location":"peg-TArray/#parameters_1","text":"that: TArray val","title":"Parameters"},{"location":"peg-TArray/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-TBool/","text":"TBool \u00b6 [Source] primitive val TBool is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : TBool val^ Returns \u00b6 TBool val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: TBool val) : Bool val Parameters \u00b6 that: TBool val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TBool val) : Bool val Parameters \u00b6 that: TBool val Returns \u00b6 Bool val","title":"primitive TBool"},{"location":"peg-TBool/#tbool","text":"[Source] primitive val TBool is Label val","title":"TBool"},{"location":"peg-TBool/#implements","text":"Label val","title":"Implements"},{"location":"peg-TBool/#constructors","text":"","title":"Constructors"},{"location":"peg-TBool/#create","text":"[Source] new val create() : TBool val^","title":"create"},{"location":"peg-TBool/#returns","text":"TBool val^","title":"Returns"},{"location":"peg-TBool/#public-functions","text":"","title":"Public Functions"},{"location":"peg-TBool/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-TBool/#returns_1","text":"String val","title":"Returns"},{"location":"peg-TBool/#eq","text":"[Source] fun box eq( that: TBool val) : Bool val","title":"eq"},{"location":"peg-TBool/#parameters","text":"that: TBool val","title":"Parameters"},{"location":"peg-TBool/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-TBool/#ne","text":"[Source] fun box ne( that: TBool val) : Bool val","title":"ne"},{"location":"peg-TBool/#parameters_1","text":"that: TBool val","title":"Parameters"},{"location":"peg-TBool/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-TNull/","text":"TNull \u00b6 [Source] primitive val TNull is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : TNull val^ Returns \u00b6 TNull val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: TNull val) : Bool val Parameters \u00b6 that: TNull val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TNull val) : Bool val Parameters \u00b6 that: TNull val Returns \u00b6 Bool val","title":"primitive TNull"},{"location":"peg-TNull/#tnull","text":"[Source] primitive val TNull is Label val","title":"TNull"},{"location":"peg-TNull/#implements","text":"Label val","title":"Implements"},{"location":"peg-TNull/#constructors","text":"","title":"Constructors"},{"location":"peg-TNull/#create","text":"[Source] new val create() : TNull val^","title":"create"},{"location":"peg-TNull/#returns","text":"TNull val^","title":"Returns"},{"location":"peg-TNull/#public-functions","text":"","title":"Public Functions"},{"location":"peg-TNull/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-TNull/#returns_1","text":"String val","title":"Returns"},{"location":"peg-TNull/#eq","text":"[Source] fun box eq( that: TNull val) : Bool val","title":"eq"},{"location":"peg-TNull/#parameters","text":"that: TNull val","title":"Parameters"},{"location":"peg-TNull/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-TNull/#ne","text":"[Source] fun box ne( that: TNull val) : Bool val","title":"ne"},{"location":"peg-TNull/#parameters_1","text":"that: TNull val","title":"Parameters"},{"location":"peg-TNull/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-TNumber/","text":"TNumber \u00b6 [Source] primitive val TNumber is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : TNumber val^ Returns \u00b6 TNumber val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: TNumber val) : Bool val Parameters \u00b6 that: TNumber val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TNumber val) : Bool val Parameters \u00b6 that: TNumber val Returns \u00b6 Bool val","title":"primitive TNumber"},{"location":"peg-TNumber/#tnumber","text":"[Source] primitive val TNumber is Label val","title":"TNumber"},{"location":"peg-TNumber/#implements","text":"Label val","title":"Implements"},{"location":"peg-TNumber/#constructors","text":"","title":"Constructors"},{"location":"peg-TNumber/#create","text":"[Source] new val create() : TNumber val^","title":"create"},{"location":"peg-TNumber/#returns","text":"TNumber val^","title":"Returns"},{"location":"peg-TNumber/#public-functions","text":"","title":"Public Functions"},{"location":"peg-TNumber/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-TNumber/#returns_1","text":"String val","title":"Returns"},{"location":"peg-TNumber/#eq","text":"[Source] fun box eq( that: TNumber val) : Bool val","title":"eq"},{"location":"peg-TNumber/#parameters","text":"that: TNumber val","title":"Parameters"},{"location":"peg-TNumber/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-TNumber/#ne","text":"[Source] fun box ne( that: TNumber val) : Bool val","title":"ne"},{"location":"peg-TNumber/#parameters_1","text":"that: TNumber val","title":"Parameters"},{"location":"peg-TNumber/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-TObject/","text":"TObject \u00b6 [Source] primitive val TObject is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : TObject val^ Returns \u00b6 TObject val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: TObject val) : Bool val Parameters \u00b6 that: TObject val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TObject val) : Bool val Parameters \u00b6 that: TObject val Returns \u00b6 Bool val","title":"primitive TObject"},{"location":"peg-TObject/#tobject","text":"[Source] primitive val TObject is Label val","title":"TObject"},{"location":"peg-TObject/#implements","text":"Label val","title":"Implements"},{"location":"peg-TObject/#constructors","text":"","title":"Constructors"},{"location":"peg-TObject/#create","text":"[Source] new val create() : TObject val^","title":"create"},{"location":"peg-TObject/#returns","text":"TObject val^","title":"Returns"},{"location":"peg-TObject/#public-functions","text":"","title":"Public Functions"},{"location":"peg-TObject/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-TObject/#returns_1","text":"String val","title":"Returns"},{"location":"peg-TObject/#eq","text":"[Source] fun box eq( that: TObject val) : Bool val","title":"eq"},{"location":"peg-TObject/#parameters","text":"that: TObject val","title":"Parameters"},{"location":"peg-TObject/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-TObject/#ne","text":"[Source] fun box ne( that: TObject val) : Bool val","title":"ne"},{"location":"peg-TObject/#parameters_1","text":"that: TObject val","title":"Parameters"},{"location":"peg-TObject/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-TPair/","text":"TPair \u00b6 [Source] primitive val TPair is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : TPair val^ Returns \u00b6 TPair val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: TPair val) : Bool val Parameters \u00b6 that: TPair val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TPair val) : Bool val Parameters \u00b6 that: TPair val Returns \u00b6 Bool val","title":"primitive TPair"},{"location":"peg-TPair/#tpair","text":"[Source] primitive val TPair is Label val","title":"TPair"},{"location":"peg-TPair/#implements","text":"Label val","title":"Implements"},{"location":"peg-TPair/#constructors","text":"","title":"Constructors"},{"location":"peg-TPair/#create","text":"[Source] new val create() : TPair val^","title":"create"},{"location":"peg-TPair/#returns","text":"TPair val^","title":"Returns"},{"location":"peg-TPair/#public-functions","text":"","title":"Public Functions"},{"location":"peg-TPair/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-TPair/#returns_1","text":"String val","title":"Returns"},{"location":"peg-TPair/#eq","text":"[Source] fun box eq( that: TPair val) : Bool val","title":"eq"},{"location":"peg-TPair/#parameters","text":"that: TPair val","title":"Parameters"},{"location":"peg-TPair/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-TPair/#ne","text":"[Source] fun box ne( that: TPair val) : Bool val","title":"ne"},{"location":"peg-TPair/#parameters_1","text":"that: TPair val","title":"Parameters"},{"location":"peg-TPair/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-TString/","text":"TString \u00b6 [Source] primitive val TString is Label val Implements \u00b6 Label val Constructors \u00b6 create \u00b6 [Source] new val create() : TString val^ Returns \u00b6 TString val^ Public Functions \u00b6 text \u00b6 [Source] fun box text() : String val Returns \u00b6 String val eq \u00b6 [Source] fun box eq( that: TString val) : Bool val Parameters \u00b6 that: TString val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: TString val) : Bool val Parameters \u00b6 that: TString val Returns \u00b6 Bool val","title":"primitive TString"},{"location":"peg-TString/#tstring","text":"[Source] primitive val TString is Label val","title":"TString"},{"location":"peg-TString/#implements","text":"Label val","title":"Implements"},{"location":"peg-TString/#constructors","text":"","title":"Constructors"},{"location":"peg-TString/#create","text":"[Source] new val create() : TString val^","title":"create"},{"location":"peg-TString/#returns","text":"TString val^","title":"Returns"},{"location":"peg-TString/#public-functions","text":"","title":"Public Functions"},{"location":"peg-TString/#text","text":"[Source] fun box text() : String val","title":"text"},{"location":"peg-TString/#returns_1","text":"String val","title":"Returns"},{"location":"peg-TString/#eq","text":"[Source] fun box eq( that: TString val) : Bool val","title":"eq"},{"location":"peg-TString/#parameters","text":"that: TString val","title":"Parameters"},{"location":"peg-TString/#returns_2","text":"Bool val","title":"Returns"},{"location":"peg-TString/#ne","text":"[Source] fun box ne( that: TString val) : Bool val","title":"ne"},{"location":"peg-TString/#parameters_1","text":"that: TString val","title":"Parameters"},{"location":"peg-TString/#returns_3","text":"Bool val","title":"Returns"},{"location":"peg-Terminal/","text":"Terminal \u00b6 [Source] A terminal parser accumulates a single lexical token rather than an AST. It applies the hidden channel once before starting, but not while parsing its elements. class ref Terminal is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( a: Parser box, l: Label val = reference) : Terminal ref^ Parameters \u00b6 a: Parser box l: Label val = reference Returns \u00b6 Terminal ref^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class Terminal"},{"location":"peg-Terminal/#terminal","text":"[Source] A terminal parser accumulates a single lexical token rather than an AST. It applies the hidden channel once before starting, but not while parsing its elements. class ref Terminal is Parser box","title":"Terminal"},{"location":"peg-Terminal/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Terminal/#constructors","text":"","title":"Constructors"},{"location":"peg-Terminal/#create","text":"[Source] new ref create( a: Parser box, l: Label val = reference) : Terminal ref^","title":"create"},{"location":"peg-Terminal/#parameters","text":"a: Parser box l: Label val = reference","title":"Parameters"},{"location":"peg-Terminal/#returns","text":"Terminal ref^","title":"Returns"},{"location":"peg-Terminal/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Terminal/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Terminal/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Terminal/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Terminal/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Terminal/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Terminal/#skip_hidden","text":"fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Terminal/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Terminal/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-Terminal/#result","text":"fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Terminal/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Terminal/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Terminal/#mul","text":"fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Terminal/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Terminal/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-Terminal/#div","text":"fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Terminal/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-Terminal/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-Terminal/#neg","text":"fun box neg() : Skip ref","title":"neg"},{"location":"peg-Terminal/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-Terminal/#opt","text":"fun box opt() : Option ref","title":"opt"},{"location":"peg-Terminal/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-Terminal/#many","text":"fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Terminal/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Terminal/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Terminal/#many1","text":"fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Terminal/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Terminal/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Terminal/#op_not","text":"fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Terminal/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Terminal/#op_and","text":"fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Terminal/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Terminal/#hide","text":"fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Terminal/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-Terminal/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-Terminal/#term","text":"fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Terminal/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Terminal/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-Terminal/#eof","text":"fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Terminal/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Token/","text":"Token \u00b6 [Source] class val Token Constructors \u00b6 create \u00b6 [Source] new val create( label': Label val, source': Source val, offset': USize val, length': USize val) : Token val^ Parameters \u00b6 label': Label val source': Source val offset': USize val length': USize val Returns \u00b6 Token val^ Public fields \u00b6 let source: Source val \u00b6 [Source] let offset: USize val \u00b6 [Source] let length: USize val \u00b6 [Source] Public Functions \u00b6 label \u00b6 [Source] fun box label() : Label val Returns \u00b6 Label val string \u00b6 [Source] fun box string() : String iso^ Returns \u00b6 String iso^ substring \u00b6 [Source] fun box substring( from: ISize val, to: ISize val) : String iso^ Parameters \u00b6 from: ISize val to: ISize val Returns \u00b6 String iso^ offset_to_index \u00b6 [Source] fun box offset_to_index( i: ISize val) : USize val Parameters \u00b6 i: ISize val Returns \u00b6 USize val","title":"class Token"},{"location":"peg-Token/#token","text":"[Source] class val Token","title":"Token"},{"location":"peg-Token/#constructors","text":"","title":"Constructors"},{"location":"peg-Token/#create","text":"[Source] new val create( label': Label val, source': Source val, offset': USize val, length': USize val) : Token val^","title":"create"},{"location":"peg-Token/#parameters","text":"label': Label val source': Source val offset': USize val length': USize val","title":"Parameters"},{"location":"peg-Token/#returns","text":"Token val^","title":"Returns"},{"location":"peg-Token/#public-fields","text":"","title":"Public fields"},{"location":"peg-Token/#let-source-source-val","text":"[Source]","title":"let source: Source val"},{"location":"peg-Token/#let-offset-usize-val","text":"[Source]","title":"let offset: USize val"},{"location":"peg-Token/#let-length-usize-val","text":"[Source]","title":"let length: USize val"},{"location":"peg-Token/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Token/#label","text":"[Source] fun box label() : Label val","title":"label"},{"location":"peg-Token/#returns_1","text":"Label val","title":"Returns"},{"location":"peg-Token/#string","text":"[Source] fun box string() : String iso^","title":"string"},{"location":"peg-Token/#returns_2","text":"String iso^","title":"Returns"},{"location":"peg-Token/#substring","text":"[Source] fun box substring( from: ISize val, to: ISize val) : String iso^","title":"substring"},{"location":"peg-Token/#parameters_1","text":"from: ISize val to: ISize val","title":"Parameters"},{"location":"peg-Token/#returns_3","text":"String iso^","title":"Returns"},{"location":"peg-Token/#offset_to_index","text":"[Source] fun box offset_to_index( i: ISize val) : USize val","title":"offset_to_index"},{"location":"peg-Token/#parameters_2","text":"i: ISize val","title":"Parameters"},{"location":"peg-Token/#returns_4","text":"USize val","title":"Returns"},{"location":"peg-Unicode/","text":"Unicode \u00b6 [Source] primitive val Unicode is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new val create() : Unicode val^ Returns \u00b6 Unicode val^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref eq \u00b6 [Source] fun box eq( that: Unicode val) : Bool val Parameters \u00b6 that: Unicode val Returns \u00b6 Bool val ne \u00b6 [Source] fun box ne( that: Unicode val) : Bool val Parameters \u00b6 that: Unicode val Returns \u00b6 Bool val","title":"primitive Unicode"},{"location":"peg-Unicode/#unicode","text":"[Source] primitive val Unicode is Parser box","title":"Unicode"},{"location":"peg-Unicode/#implements","text":"Parser box","title":"Implements"},{"location":"peg-Unicode/#constructors","text":"","title":"Constructors"},{"location":"peg-Unicode/#create","text":"[Source] new val create() : Unicode val^","title":"create"},{"location":"peg-Unicode/#returns","text":"Unicode val^","title":"Returns"},{"location":"peg-Unicode/#public-functions","text":"","title":"Public Functions"},{"location":"peg-Unicode/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-Unicode/#parameters","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-Unicode/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Unicode/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-Unicode/#returns_2","text":"String val","title":"Returns"},{"location":"peg-Unicode/#skip_hidden","text":"fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-Unicode/#parameters_1","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-Unicode/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-Unicode/#result","text":"fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-Unicode/#parameters_2","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-Unicode/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-Unicode/#mul","text":"fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-Unicode/#parameters_3","text":"that: Parser box","title":"Parameters"},{"location":"peg-Unicode/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-Unicode/#div","text":"fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-Unicode/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-Unicode/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-Unicode/#neg","text":"fun box neg() : Skip ref","title":"neg"},{"location":"peg-Unicode/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-Unicode/#opt","text":"fun box opt() : Option ref","title":"opt"},{"location":"peg-Unicode/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-Unicode/#many","text":"fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-Unicode/#parameters_5","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Unicode/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-Unicode/#many1","text":"fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-Unicode/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-Unicode/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-Unicode/#op_not","text":"fun box op_not() : Not ref","title":"op_not"},{"location":"peg-Unicode/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-Unicode/#op_and","text":"fun box op_and() : Not ref","title":"op_and"},{"location":"peg-Unicode/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-Unicode/#hide","text":"fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-Unicode/#parameters_7","text":"that: Parser box","title":"Parameters"},{"location":"peg-Unicode/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-Unicode/#term","text":"fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-Unicode/#parameters_8","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-Unicode/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-Unicode/#eof","text":"fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-Unicode/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-Unicode/#eq","text":"[Source] fun box eq( that: Unicode val) : Bool val","title":"eq"},{"location":"peg-Unicode/#parameters_9","text":"that: Unicode val","title":"Parameters"},{"location":"peg-Unicode/#returns_16","text":"Bool val","title":"Returns"},{"location":"peg-Unicode/#ne","text":"[Source] fun box ne( that: Unicode val) : Bool val","title":"ne"},{"location":"peg-Unicode/#parameters_10","text":"that: Unicode val","title":"Parameters"},{"location":"peg-Unicode/#returns_17","text":"Bool val","title":"Returns"},{"location":"peg-UnicodeRange/","text":"UnicodeRange \u00b6 [Source] class ref UnicodeRange is Parser box Implements \u00b6 Parser box Constructors \u00b6 create \u00b6 [Source] new ref create( low: U32 val, hi: U32 val = 1114111) : UnicodeRange ref^ Parameters \u00b6 low: U32 val hi: U32 val = 1114111 Returns \u00b6 UnicodeRange ref^ Public Functions \u00b6 parse \u00b6 [Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val tree: Bool val hidden: Parser box Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) error_msg \u00b6 [Source] fun box error_msg() : String val Returns \u00b6 String val skip_hidden \u00b6 fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val Parameters \u00b6 source: Source val offset: USize val hidden: Parser box Returns \u00b6 USize val result \u00b6 fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) Parameters \u00b6 source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference Returns \u00b6 ( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box)) mul \u00b6 fun box mul( that: Parser box) : Sequence ref Parameters \u00b6 that: Parser box Returns \u00b6 Sequence ref div \u00b6 fun box div( that: Parser box) : Choice ref Parameters \u00b6 that: Parser box Returns \u00b6 Choice ref neg \u00b6 fun box neg() : Skip ref Returns \u00b6 Skip ref opt \u00b6 fun box opt() : Option ref Returns \u00b6 Option ref many \u00b6 fun box many( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref many1 \u00b6 fun box many1( sep: Parser box = reference) : Many ref Parameters \u00b6 sep: Parser box = reference Returns \u00b6 Many ref op_not \u00b6 fun box op_not() : Not ref Returns \u00b6 Not ref op_and \u00b6 fun box op_and() : Not ref Returns \u00b6 Not ref hide \u00b6 fun box hide( that: Parser box) : Hidden ref Parameters \u00b6 that: Parser box Returns \u00b6 Hidden ref term \u00b6 fun box term( l: Label val = reference) : Terminal ref Parameters \u00b6 l: Label val = reference Returns \u00b6 Terminal ref eof \u00b6 fun box eof() : EndOfFile ref Returns \u00b6 EndOfFile ref","title":"class UnicodeRange"},{"location":"peg-UnicodeRange/#unicoderange","text":"[Source] class ref UnicodeRange is Parser box","title":"UnicodeRange"},{"location":"peg-UnicodeRange/#implements","text":"Parser box","title":"Implements"},{"location":"peg-UnicodeRange/#constructors","text":"","title":"Constructors"},{"location":"peg-UnicodeRange/#create","text":"[Source] new ref create( low: U32 val, hi: U32 val = 1114111) : UnicodeRange ref^","title":"create"},{"location":"peg-UnicodeRange/#parameters","text":"low: U32 val hi: U32 val = 1114111","title":"Parameters"},{"location":"peg-UnicodeRange/#returns","text":"UnicodeRange ref^","title":"Returns"},{"location":"peg-UnicodeRange/#public-functions","text":"","title":"Public Functions"},{"location":"peg-UnicodeRange/#parse","text":"[Source] fun box parse( source: Source val, offset: USize val, tree: Bool val, hidden: Parser box) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"parse"},{"location":"peg-UnicodeRange/#parameters_1","text":"source: Source val offset: USize val tree: Bool val hidden: Parser box","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_1","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-UnicodeRange/#error_msg","text":"[Source] fun box error_msg() : String val","title":"error_msg"},{"location":"peg-UnicodeRange/#returns_2","text":"String val","title":"Returns"},{"location":"peg-UnicodeRange/#skip_hidden","text":"fun box skip_hidden( source: Source val, offset: USize val, hidden: Parser box) : USize val","title":"skip_hidden"},{"location":"peg-UnicodeRange/#parameters_2","text":"source: Source val offset: USize val hidden: Parser box","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_3","text":"USize val","title":"Returns"},{"location":"peg-UnicodeRange/#result","text":"fun box result( source: Source val, offset: USize val, from: USize val, length: USize val, tree: Bool val, l: Label val = reference) : (USize val , (AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"result"},{"location":"peg-UnicodeRange/#parameters_3","text":"source: Source val offset: USize val from: USize val length: USize val tree: Bool val l: Label val = reference","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_4","text":"( USize val , ( AST val | Token val | NotPresent val | Skipped val | Lex val | Parser box))","title":"Returns"},{"location":"peg-UnicodeRange/#mul","text":"fun box mul( that: Parser box) : Sequence ref","title":"mul"},{"location":"peg-UnicodeRange/#parameters_4","text":"that: Parser box","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_5","text":"Sequence ref","title":"Returns"},{"location":"peg-UnicodeRange/#div","text":"fun box div( that: Parser box) : Choice ref","title":"div"},{"location":"peg-UnicodeRange/#parameters_5","text":"that: Parser box","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_6","text":"Choice ref","title":"Returns"},{"location":"peg-UnicodeRange/#neg","text":"fun box neg() : Skip ref","title":"neg"},{"location":"peg-UnicodeRange/#returns_7","text":"Skip ref","title":"Returns"},{"location":"peg-UnicodeRange/#opt","text":"fun box opt() : Option ref","title":"opt"},{"location":"peg-UnicodeRange/#returns_8","text":"Option ref","title":"Returns"},{"location":"peg-UnicodeRange/#many","text":"fun box many( sep: Parser box = reference) : Many ref","title":"many"},{"location":"peg-UnicodeRange/#parameters_6","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_9","text":"Many ref","title":"Returns"},{"location":"peg-UnicodeRange/#many1","text":"fun box many1( sep: Parser box = reference) : Many ref","title":"many1"},{"location":"peg-UnicodeRange/#parameters_7","text":"sep: Parser box = reference","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_10","text":"Many ref","title":"Returns"},{"location":"peg-UnicodeRange/#op_not","text":"fun box op_not() : Not ref","title":"op_not"},{"location":"peg-UnicodeRange/#returns_11","text":"Not ref","title":"Returns"},{"location":"peg-UnicodeRange/#op_and","text":"fun box op_and() : Not ref","title":"op_and"},{"location":"peg-UnicodeRange/#returns_12","text":"Not ref","title":"Returns"},{"location":"peg-UnicodeRange/#hide","text":"fun box hide( that: Parser box) : Hidden ref","title":"hide"},{"location":"peg-UnicodeRange/#parameters_8","text":"that: Parser box","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_13","text":"Hidden ref","title":"Returns"},{"location":"peg-UnicodeRange/#term","text":"fun box term( l: Label val = reference) : Terminal ref","title":"term"},{"location":"peg-UnicodeRange/#parameters_9","text":"l: Label val = reference","title":"Parameters"},{"location":"peg-UnicodeRange/#returns_14","text":"Terminal ref","title":"Returns"},{"location":"peg-UnicodeRange/#eof","text":"fun box eof() : EndOfFile ref","title":"eof"},{"location":"peg-UnicodeRange/#returns_15","text":"EndOfFile ref","title":"Returns"},{"location":"peg-UnknownNodeLabel/","text":"UnknownNodeLabel \u00b6 [Source] class val UnknownNodeLabel is PegError box Implements \u00b6 PegError box Constructors \u00b6 create \u00b6 [Source] new val create( label': Label val) : UnknownNodeLabel val^ Parameters \u00b6 label': Label val Returns \u00b6 UnknownNodeLabel val^ Public fields \u00b6 let label: Label val \u00b6 [Source] Public Functions \u00b6 category \u00b6 [Source] fun box category() : String val Returns \u00b6 String val description \u00b6 [Source] fun box description() : String val Returns \u00b6 String val markers \u00b6 [Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref Returns \u00b6 Iterator [( Source val , USize val , USize val , String val)] ref","title":"class UnknownNodeLabel"},{"location":"peg-UnknownNodeLabel/#unknownnodelabel","text":"[Source] class val UnknownNodeLabel is PegError box","title":"UnknownNodeLabel"},{"location":"peg-UnknownNodeLabel/#implements","text":"PegError box","title":"Implements"},{"location":"peg-UnknownNodeLabel/#constructors","text":"","title":"Constructors"},{"location":"peg-UnknownNodeLabel/#create","text":"[Source] new val create( label': Label val) : UnknownNodeLabel val^","title":"create"},{"location":"peg-UnknownNodeLabel/#parameters","text":"label': Label val","title":"Parameters"},{"location":"peg-UnknownNodeLabel/#returns","text":"UnknownNodeLabel val^","title":"Returns"},{"location":"peg-UnknownNodeLabel/#public-fields","text":"","title":"Public fields"},{"location":"peg-UnknownNodeLabel/#let-label-label-val","text":"[Source]","title":"let label: Label val"},{"location":"peg-UnknownNodeLabel/#public-functions","text":"","title":"Public Functions"},{"location":"peg-UnknownNodeLabel/#category","text":"[Source] fun box category() : String val","title":"category"},{"location":"peg-UnknownNodeLabel/#returns_1","text":"String val","title":"Returns"},{"location":"peg-UnknownNodeLabel/#description","text":"[Source] fun box description() : String val","title":"description"},{"location":"peg-UnknownNodeLabel/#returns_2","text":"String val","title":"Returns"},{"location":"peg-UnknownNodeLabel/#markers","text":"[Source] fun box markers() : Iterator[(Source val , USize val , USize val , String val)] ref","title":"markers"},{"location":"peg-UnknownNodeLabel/#returns_3","text":"Iterator [( Source val , USize val , USize val , String val)] ref","title":"Returns"},{"location":"src/peg/ast/","text":"type ASTChild is (AST | Token | NotPresent) class val AST let _label: Label embed children: Array[ASTChild] = children.create() new iso create(label': Label = NoLabel) => _label = label' fun ref push(some: ASTChild) => children.push(some) fun label(): Label => _label fun size(): USize => children.size() fun extract(): ASTChild => try children(0)? else NotPresent end","title":"Ast"},{"location":"src/peg/choice/","text":"class Choice is Parser \"\"\" Given a sequence of parser rules, return the result of the first rule that matches. Note that the result is deterministic: if more than one of the rules could match, the first in the list will be chosen. \"\"\" let _seq: Array[Parser] new create(a: Parser, b: Parser) => _seq = [a; b] new concat(a: Choice box, b: Parser) => let r = a._seq.clone() r.push(b) _seq = consume r fun div(that: Parser): Choice => concat(this, that) fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => var fail: (USize, Parser) = (0, this) for p in _seq.values() do match p.parse(source, offset, tree, hidden) | (let advance: USize, let r: ParseOK) => return (advance, r) | (let advance: USize, let r: Parser) => if advance > fail._1 then fail = (advance, r) end end end fail fun error_msg(): String => try _seq(0)?.error_msg() else \"an empty choice\" end","title":"Choice"},{"location":"src/peg/eof/","text":"class EndOfFile is Parser let _a: Parser new create(a: Parser) => _a = a fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => match _a.parse(source, offset, tree, hidden) | (let advance: USize, let r: ParseOK) => let from = skip_hidden(source, offset + advance, hidden) if from == source.content.size() then (from - offset, r) else (from - offset, this) end | (let advance: USize, let r: Parser) => (advance, r) else (0, this) end fun error_msg(): String => \"end-of-file\"","title":"Eof"},{"location":"src/peg/forward/","text":"class Forward is Parser \"\"\" A forwarding parser is used to create mutually recursive parse rules. The forwarding parser can be used instead, and is updated when the real parse rule is created. \"\"\" var _a: Parser = NoParser new create() => None fun ref update(value: Parser) => _a = value fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => if _a isnt NoParser then _a.parse(source, offset, tree, hidden) else (0, this) end fun complete(): Bool => _a isnt NoParser fun error_msg(): String => _a.error_msg()","title":"Forward"},{"location":"src/peg/hidden/","text":"class Hidden is Parser \"\"\" A hidden channel is used to specify whitespace, comments, and any other lexical tokens that should be discarded from the input stream. This replaces the hidden channel. \"\"\" let _a: Parser let _hide: Parser new create(a: Parser, hide: Parser) => _a = a _hide = hide fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => match _a.parse(source, offset, tree, _hide) | (let advance: USize, let r: ParseOK) => let from = skip_hidden(source, offset + advance, _hide) (from - offset, r) | (let advance: USize, let r: Parser) => (advance, r) else (0, this) end","title":"Hidden"},{"location":"src/peg/json/","text":"primitive JsonParser fun apply(): Parser val => recover let obj = Forward let array = Forward let digit19 = R('1', '9') let digit = R('0', '9') let digits = digit.many1() let int = (L(\"-\") * digit19 * digits) / (L(\"-\") * digit) / (digit19 * digits) / digit let frac = L(\".\") * digits let exp = (L(\"e\") / L(\"E\")) * (L(\"+\") / L(\"-\")).opt() * digits let number = (int * frac.opt() * exp.opt()).term(TNumber) let hex = digit / R('a', 'f') / R('A', 'F') let char = L(\"\\\\\\\"\") / L(\"\\\\\\\\\") / L(\"\\\\/\") / L(\"\\\\b\") / L(\"\\\\f\") / L(\"\\\\n\") / L(\"\\\\r\") / L(\"\\\\t\") / (L(\"\\\\u\") * hex * hex * hex * hex) / (not L(\"\\\"\") * not L(\"\\\\\") * R(' ')) let string = (L(\"\\\"\") * char.many() * L(\"\\\"\")).term(TString) let value = L(\"null\").term(TNull) / L(\"true\").term(TBool) / L(\"false\").term(TBool) / number / string / obj / array let pair = (string * -L(\":\") * value).node(TPair) obj() = -L(\"{\") * pair.many(L(\",\")).node(TObject) * -L(\"}\") array() = -L(\"[\") * value.many(L(\",\")).node(TArray) * -L(\"]\") let whitespace = (L(\" \") / L(\"\\t\") / L(\"\\r\") / L(\"\\n\")).many1() let linecomment = (L(\"#\") / L(\"//\")) * (not L(\"\\r\") * not L(\"\\n\") * Unicode).many() let nestedcomment = Forward nestedcomment() = L(\"/*\") * ((not L(\"/*\") * not L(\"*/\") * Unicode) / nestedcomment).many() * L(\"*/\") let hidden = (whitespace / linecomment / nestedcomment).many() value.hide(hidden) end primitive TObject is Label fun text(): String => \"Object\" primitive TPair is Label fun text(): String => \"Pair\" primitive TArray is Label fun text(): String => \"Array\" primitive TString is Label fun text(): String => \"String\" primitive TNumber is Label fun text(): String => \"Number\" primitive TBool is Label fun text(): String => \"Bool\" primitive TNull is Label fun text(): String => \"Null\"","title":"Json"},{"location":"src/peg/literal/","text":"type L is Literal class Literal is Parser let _text: String new val create(from: String) => _text = from fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => let from = skip_hidden(source, offset, hidden) if source.content.at(_text, from.isize()) then result(source, offset, from, _text.size(), tree) else (from - offset, this) end fun error_msg(): String => _text","title":"Literal"},{"location":"src/peg/many/","text":"class Many is Parser let _a: Parser let _sep: Parser var _label: Label = NoLabel let _require: Bool new create(a: Parser, sep: Parser, require: Bool) => _a = a _sep = sep _require = require fun label(): Label => _label fun ref node(value: Label): Many => _label = value; this fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => if tree then _parse_tree(source, offset, hidden) else _parse_token(source, offset) end fun _parse_tree(source: Source, offset: USize, hidden: Parser): ParseResult => var length = USize(0) var trailing = false let ast = AST(_label) while true do match _a.parse(source, offset + length, true, hidden) | (let advance: USize, Skipped) => length = length + advance | (let advance: USize, let r: ASTChild) => ast.push(r) length = length + advance | (let advance: USize, let r: Parser) => if trailing and (advance > 0) then return (length + advance, r) else break end else break end match _sep.parse(source, offset + length, true, hidden) | (let advance: USize, let r: ParseOK) => if advance > 0 then length = length + advance trailing = true end else trailing = false break end end if _require and (length == 0) then (0, this) elseif trailing then (length, this) else (length, consume ast) end fun _parse_token(source: Source, offset: USize): ParseResult => var length = USize(0) var trailing = false while true do match _a.parse(source, offset + length, false, NoParser) | (0, NotPresent) | (0, Skipped) => None | (let advance: USize, Lex) => length = length + advance | (let advance: USize, let r: Parser) => if trailing and (advance > 0) then return (length + advance, r) else break end else break end match _sep.parse(source, offset + length, false, NoParser) | (let advance: USize, let r: ParseOK) => if advance > 0 then length = length + advance trailing = true end else trailing = false break end end if _require and (length == 0) then (0, this) elseif trailing then (length, this) else (length, Lex) end fun error_msg(): String => recover let s = String if _require then s.append(\"at least one \") end s.append(\"element\") if _sep isnt NoParser then s.append(\" without a trailing separator\") end s end","title":"Many"},{"location":"src/peg/not/","text":"class Not is Parser \"\"\" If the parse succeeds, then fail. Otherwise, return a zero length Skipped. \"\"\" let _a: Parser new create(a: Parser) => _a = a fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => match _a.parse(source, offset, tree, hidden) | (let advance: USize, let r: ParseOK) => (advance, this) else (0, Skipped) end fun error_msg(): String => \"not to find \" + _a.error_msg()","title":"Not"},{"location":"src/peg/option/","text":"class Option is Parser let _a: Parser new create(a: Parser) => _a = a fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => match _a.parse(source, offset, tree, hidden) | (let advance: USize, let r: ParseOK) => (advance, r) else (0, NotPresent) end","title":"Option"},{"location":"src/peg/parser/","text":"type ParseResult is (USize, (ParseOK | Parser)) type ParseOK is ( AST | Token | NotPresent | Skipped | Lex ) primitive NotPresent \"\"\" Returned by Option when the parse isn't found \"\"\" fun label(): Label => NoLabel primitive Skipped \"\"\" Returned by Skip when the parse is found, and Not when the parse isn't found. \"\"\" primitive Lex \"\"\" Returned when a parse tree isn't neeeded \"\"\" trait box Parser fun parse(source: Source, offset: USize = 0, tree: Bool = true, hidden: Parser = NoParser): ParseResult fun error_msg(): String => \"not to see an error in this parser\" fun skip_hidden(source: Source, offset: USize, hidden: Parser): USize => \"\"\" Return a new start location, skipping over hidden tokens. \"\"\" offset + hidden.parse(source, offset, false, NoParser)._1 fun result(source: Source, offset: USize, from: USize, length: USize, tree: Bool, l: Label = NoLabel): ParseResult => \"\"\" Once a terminal parser has an offset and length, it should call `result` to return either a token (if a tree is requested) or a new lexical position. \"\"\" if tree then ((from - offset) + length, Token(l, source, from, length)) else ((from - offset) + length, Lex) end fun mul(that: Parser): Sequence => Sequence(this, that) fun div(that: Parser): Choice => Choice(this, that) fun neg(): Skip => Skip(this) fun opt(): Option => Option(this) fun many(sep: Parser = NoParser): Many => Many(this, sep, false) fun many1(sep: Parser = NoParser): Many => Many(this, sep, true) fun op_not(): Not => Not(this) fun op_and(): Not => Not(Not(this)) fun hide(that: Parser): Hidden => Hidden(this, that) fun term(l: Label = NoLabel): Terminal => Terminal(this, l) fun eof(): EndOfFile => EndOfFile(this) primitive NoParser is Parser fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => (0, Lex) fun error_msg(): String => \"not to be using NoParser\" trait val Label fun text(): String primitive NoLabel is Label fun text(): String => \"\"","title":"Parser"},{"location":"src/peg/pegcompiler/","text":"use \"term\" use \"collections\" type Defs is Map[String, (Forward, Token)] primitive PegCompiler fun apply(source: Source): (Parser | Array[PegError]) => let p: Parser = PegParser().eof() let errors = Array[PegError] match p.parse(source) | (_, let ast: AST) => let r = _compile_grammar(errors, ast) if errors.size() > 0 then errors else r.eof() end | (let offset: USize, let r: Parser) => errors.push(SyntaxError(source, offset, r)) errors else // Unreachable NoParser end fun _compile_grammar(errors: Array[PegError], ast: AST): Parser => let defs = Defs for node in ast.children.values() do try _forward_definition(errors, defs, node as AST) end end for node in ast.children.values() do try _compile_definition(errors, defs, node as AST) end end if not defs.contains(\"start\") then errors.push(NoStartDefinition) end if errors.size() == 0 then try (var start: Parser, _) = defs(\"start\")? if defs.contains(\"hidden\") then start = start.hide(defs(\"hidden\")?._1) end return start end end NoParser fun _forward_definition(errors: Array[PegError], defs: Defs, ast: AST) => try let token = ast.children(0)? as Token let ident: String = token.string() if defs.contains(ident) then (_, let prev) = defs(ident)? errors.push(DuplicateDefinition(token, prev)) else defs(ident) = (Forward, token) end end fun _compile_definition(errors: Array[PegError], defs: Defs, ast: AST) => try let ident: String = (ast.children(0)? as Token).string() let rule = _compile_expr(errors, defs, ast.children(1)?) (let p, _) = defs(ident)? if not p.complete() then let c = ident(0)? if (c >= 'A') and (c <= 'Z') then p() = rule.term(PegLabel(ident)) else p() = match rule | let rule': Sequence => rule'.node(PegLabel(ident)) | let rule': Many => rule'.node(PegLabel(ident)) else rule end end end end fun _compile_expr(errors: Array[PegError], defs: Defs, node: ASTChild) : (Parser ref | NoParser) => try match node.label() | PegChoice => let ast = node as AST var p = _compile_expr(errors, defs, ast.children(0)?) for i in Range(1, ast.children.size()) do p = p / _compile_expr(errors, defs, ast.children(i)?) end p | PegSeq => let ast = node as AST var p = _compile_expr(errors, defs, ast.children(0)?) for i in Range(1, ast.children.size()) do p = p * _compile_expr(errors, defs, ast.children(i)?) end p | PegSkip => -_compile_expr(errors, defs, (node as AST).children(0)?) | PegNot => not _compile_expr(errors, defs, (node as AST).children(0)?) | PegAnd => not not _compile_expr(errors, defs, (node as AST).children(0)?) | PegMany1 => _compile_expr(errors, defs, (node as AST).children(0)?).many1() | PegMany => _compile_expr(errors, defs, (node as AST).children(0)?).many() | PegSep1 => let ast = node as AST let sep = _compile_expr(errors, defs, ast.children(1)?) _compile_expr(errors, defs, ast.children(0)?).many1(sep) | PegSep => let ast = node as AST let sep = _compile_expr(errors, defs, ast.children(1)?) _compile_expr(errors, defs, ast.children(0)?).many(sep) | PegOpt => _compile_expr(errors, defs, (node as AST).children(0)?).opt() | PegRange => let ast = node as AST let a = _unescape(ast.children(0)? as Token).utf32(0)?._1 let b = _unescape(ast.children(1)? as Token).utf32(0)?._1 R(a, b) | PegIdent => let token = node as Token let ident: String = token.string() if not defs.contains(ident) then errors.push(MissingDefinition(token)) NoParser else defs(ident)?._1 end | PegAny => R(' ') | PegChar => let text = _unescape(node as Token) L(text).term(PegLabel(text)) | PegString => let text = _unescape(node as Token) L(text).term(PegLabel(text)) else errors.push(UnknownNodeLabel(node.label())) NoParser end else errors.push(MalformedAST) NoParser end fun _unescape(token: Token): String => recover let out = String var escape = false var hex = USize(0) var hexrune = U32(0) for rune in token.substring(1, -1).runes() do if escape then match rune | '0' => out.append(\"\\0\") | '\"' => out.append(\"\\\"\") | '\\\\' => out.append(\"\\\\\") | 'a' => out.append(\"\\a\") | 'b' => out.append(\"\\b\") | 'f' => out.append(\"\\f\") | 'n' => out.append(\"\\n\") | 'r' => out.append(\"\\r\") | 't' => out.append(\"\\t\") | 'v' => out.append(\"\\v\") | '\\'' => out.append(\"'\") | 'x' => hex = 2 | 'u' => hex = 4 | 'U' => hex = 6 end elseif rune == '\\\\' then escape = true elseif hex > 0 then hexrune = (hexrune << 8) or match rune | if (rune >= '0') and (rune <= '9') => rune - '0' | if (rune >= 'a') and (rune <= 'f') => (rune - 'a') + 10 else (rune - 'A') + 10 end if (hex = hex - 1) == 1 then out.push_utf32(hexrune = 0) end else out.push_utf32(rune) end end out end class val PegLabel is Label let _text: String new val create(text': String) => _text = text' fun text(): String => _text","title":"Pegcompiler"},{"location":"src/peg/pegerror/","text":"use \"collections\" use \"term\" type Marker is (Source, USize, USize, String) trait box PegError fun category(): String fun description(): String fun markers(): Iterator[Marker] => Array[Marker].values() class SyntaxError is PegError let source: Source let offset: USize let parser: Parser new create(source': Source, offset': USize, parser': Parser) => source = source' offset = offset' parser = parser' fun category(): String => \"Syntax Error\" fun description(): String => \"\"\" There is a syntax error that has prevented the parser from being able to understand the source text. \"\"\" fun markers(): Iterator[Marker] => [(source, offset, USize(1), \"expected \" + parser.error_msg())].values() class val DuplicateDefinition is PegError let def: Token let prev: Token new val create(def': Token, prev': Token) => def = def' prev = prev' fun category(): String => \"Duplicate Definition\" fun description(): String => \"\"\" One of the parse rules has been defined more than once. \"\"\" fun markers(): Iterator[Marker] => [ (def.source, def.offset, def.length, \"rule has been defined more than once\") (prev.source, prev.offset, prev.length, \"previous definition is here\") ].values() class val MissingDefinition is PegError let token: Token new val create(token': Token) => token = token' fun category(): String => \"Missing Definition\" fun description(): String => \"\"\" One of the parse rules references another rule that has not been defined. \"\"\" fun markers(): Iterator[Marker] => [ (token.source, token.offset, token.length, \"rule has not been defined\") ].values() class val UnknownNodeLabel is PegError let label: Label new val create(label': Label) => label = label' fun category(): String => \"Unknown Node Label\" fun description(): String => \"\"\" There is an internal error that has resulted in an unknown node label in the abstract syntax tree that describes the parsing expression grammar. \"\"\" primitive NoStartDefinition is PegError fun category(): String => \"No Start Rule\" fun description(): String => \"\"\" A parsing expression grammar must have a 'start' rule. This is the initial rule that is applied to the source text to parse it. \"\"\" primitive MalformedAST is PegError fun category(): String => \"Malformed AST\" fun description(): String => \"\"\" There is an internal error that has resulted in an abstract syntax tree that the compiler does not understand. \"\"\" primitive PegFormatError fun console(e: PegError val): ByteSeqIter => let text = recover [ ANSI.cyan() \"-- \"; e.category(); \" --\\n\\n\" ANSI.reset() ] end for m in e.markers() do (let line, let col) = Position(m._1, m._2) let source = Position.text(m._1, m._2, col) let indent = Position.indent(source, col) let mark = recover String(m._3) end for i in Range(0, m._3) do mark.append(\"^\") end let line_text: String = line.string() let line_indent = Position.indent(line_text, line_text.size() + 1) text.append( recover [ ANSI.grey() m._1.path; \":\"; line_text; \":\"; col.string(); \":\"; m._3.string() \"\\n\\n\" line_text; \": \" ANSI.reset() source; \"\\n\" ANSI.red() line_indent; \" \"; indent; consume mark; \"\\n\" line_indent; \" \"; indent; m._4 ANSI.reset() \"\\n\\n\" ] end ) end text.append( recover [ e.description() \"\\n\\n\" ] end ) text fun json(e: PegError val): ByteSeqIter => let text = recover [ \"{\\n \\\"category\\\": \\\"\" e.category() \"\\\"\\n \\\"description\\\": \\\"\" e.description() \"\\\"\\n \\\"markers\\\":\\n [\\n\" ] end for m in e.markers() do (let line, let col) = Position(m._1, m._2) text.append( recover [ as String: \" {\\n\" \" \\\"file\\\": \\\"\"; m._1.path; \"\\\"\\n\" \" \\\"line\\\": \"; line.string(); \"\\n\" \" \\\"column\\\": \"; col.string(); \"\\n\" \" \\\"length\\\": \"; m._3.string(); \"\\n\" \" \\\"text\\\": \\\"\"; m._4; \"\\\"\\n\" \" }\\n\" ] end ) end text.push(\" ]\\n}\\n\") text","title":"Pegerror"},{"location":"src/peg/pegparser/","text":"primitive PegParser fun apply(): Parser val => recover let digit = R('0', '9') let hex = digit / R('a', 'f') / R('A', 'F') let char = L(\"\\\\0\") / L(\"\\\\\\\"\") / L(\"\\\\\\\\\") / L(\"\\\\a\") / L(\"\\\\b\") / L(\"\\\\f\") / L(\"\\\\n\") / L(\"\\\\r\") / L(\"\\\\t\") / L(\"\\\\v\") / L(\"\\\\'\") / (L(\"\\\\x\") * hex * hex) / (L(\"\\\\u\") * hex * hex * hex * hex) / (L(\"\\\\U\") * hex * hex * hex * hex * hex * hex) / (not L(\"\\\"\") * not L(\"\\\\\") * R(' ')) let string = (L(\"\\\"\") * char.many() * L(\"\\\"\")).term(PegString) let charlit = (L(\"'\") * char * L(\"'\")).term(PegChar) let dot = L(\".\").term(PegAny) let ident_start = R('a', 'z') / R('A', 'Z') / L(\"_\") let ident_cont = ident_start / R('0', '9') let ident = (ident_start * ident_cont.many()).term(PegIdent) let range = (charlit * -L(\"..\") * charlit).node(PegRange) let expr = Forward let group = -L(\"(\") * expr * -L(\")\") let primary = (ident * not L(\"<-\")) / group / range / string / charlit / dot let suffix = (primary * -L(\"?\")).node(PegOpt) / (primary * -L(\"*\")).node(PegMany) / (primary * -L(\"+\")).node(PegMany1) / (primary * -L(\"%+\") * primary).node(PegSep1) / (primary * -L(\"%\") * primary).node(PegSep) / primary let prefix = (-L(\"&\") * suffix).node(PegAnd) / (-L(\"!\") * suffix).node(PegNot) / (-L(\"-\") * suffix).node(PegSkip) / suffix let sequence = prefix.many1().node(PegSeq) expr() = sequence.many1(L(\"/\")).node(PegChoice) let definition = (ident * -L(\"<-\") * expr).node(PegDef) let whitespace = (L(\" \") / L(\"\\t\") / L(\"\\r\") / L(\"\\n\")).many1() let linecomment = (L(\"#\") / L(\"//\")) * (not L(\"\\r\") * not L(\"\\n\") * Unicode).many() let nestedcomment = Forward nestedcomment() = L(\"/*\") * ((not L(\"/*\") * not L(\"*/\") * Unicode) / nestedcomment).many() * L(\"*/\") let hidden = (whitespace / linecomment / nestedcomment).many() definition.many1().node(PegGrammar).hide(hidden) end primitive PegString is Label fun text(): String => \"String\" primitive PegChar is Label fun text(): String => \"Char\" primitive PegAny is Label fun text(): String => \"Any\" primitive PegIdent is Label fun text(): String => \"Ident\" primitive PegRange is Label fun text(): String => \"Range\" primitive PegOpt is Label fun text(): String => \"Opt\" primitive PegMany is Label fun text(): String => \"Many\" primitive PegMany1 is Label fun text(): String => \"Many1\" primitive PegSep is Label fun text(): String => \"Sep\" primitive PegSep1 is Label fun text(): String => \"Sep1\" primitive PegAnd is Label fun text(): String => \"And\" primitive PegNot is Label fun text(): String => \"Not\" primitive PegSkip is Label fun text(): String => \"Skip\" primitive PegSeq is Label fun text(): String => \"Seq\" primitive PegChoice is Label fun text(): String => \"Choice\" primitive PegDef is Label fun text(): String => \"Def\" primitive PegGrammar is Label fun text(): String => \"Grammar\"","title":"Pegparser"},{"location":"src/peg/position/","text":"use \"collections\" primitive Position fun apply(source: Source, offset: USize): (USize, USize) => var cr = false var line = USize(1) var col = USize(1) try for i in Range(0, offset) do match source.content(i)? | '\\r' => line = line + 1 col = 1 cr = true | '\\n' => if not cr then line = line + 1 col = 1 else cr = false end else col = col + 1 cr = false end end end (line, col) fun text(source: Source, offset: USize, col: USize): String => let start = ((offset - col) + 1).isize() let finish = try source.content.find(\"\\n\", start)? else source.content.size().isize() end source.content.substring(start, finish) fun indent(line: String, col: USize): String => recover let s = String try for i in Range(0, col - 1) do if line(i)? == '\\t' then s.append(\"\\t\") else s.append(\" \") end end end s end","title":"Position"},{"location":"src/peg/printer/","text":"use \"collections\" primitive Printer fun apply(p: ASTChild, depth: USize = 0, indent: String = \" \", s: String ref = String): String ref => _indent(depth, indent, s) s.append(\"(\") s.append(p.label().text()) match p | let ast: AST => s.append(\"\\n\") for child in ast.children.values() do Printer(child, depth + 1, indent, s) end _indent(depth, indent, s) | let token: Token => s.append(\" \") s.append(token.source.content, token.offset, token.length) end s.append(\")\\n\") s fun _indent(depth: USize, indent: String, s: String ref) => for i in Range(0, depth) do s.append(indent) end","title":"Printer"},{"location":"src/peg/sequence/","text":"class Sequence is Parser let _seq: Array[Parser] var _label: Label new create(a: Parser, b: Parser) => _seq = [a; b] _label = NoLabel new concat(a: Sequence box, b: Parser) => let r = a._seq.clone() r.push(b) _seq = consume r _label = a._label fun label(): Label => _label fun ref node(value: Label): Sequence => _label = value; this fun mul(that: Parser): Sequence => concat(this, that) fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => if tree then _parse_tree(source, offset, hidden) else _parse_token(source, offset) end fun _parse_tree(source: Source, offset: USize, hidden: Parser): ParseResult => var length = USize(0) let ast = AST(_label) for p in _seq.values() do match p.parse(source, offset + length, true, hidden) | (let advance: USize, Skipped) => length = length + advance | (let advance: USize, let r: (Token | NotPresent)) => ast.push(r) length = length + advance | (let advance: USize, let r: AST) => match p | let p': (Sequence box | Many box) if p'.label() is NoLabel => for child in r.children.values() do ast.push(child) end else ast.push(r) end length = length + advance | (let advance: USize, let r: Parser) => return (length + advance, r) else return (length, this) end end match ast.size() | 0 if _label is NoLabel => (length, Skipped) | 1 if _label is NoLabel => (length, ast.extract()) else (length, consume ast) end fun _parse_token(source: Source, offset: USize): ParseResult => var length = USize(0) for p in _seq.values() do match p.parse(source, offset + length, false, NoParser) | (0, NotPresent) | (0, Skipped) => None | (let advance: USize, Lex) => length = length + advance | (let advance: USize, let r: Parser) => return (length + advance, r) else return (length, this) end end (length, Lex) fun error_msg(): String => try _seq(0)?.error_msg() else \"an empty sequence\" end","title":"Sequence"},{"location":"src/peg/skip/","text":"class Skip is Parser let _a: Parser new create(a: Parser) => _a = a fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => match _a.parse(source, offset, false, hidden) | (let advance: USize, let r: ParseOK) => (advance, Skipped) | (let advance: USize, let r: Parser) => (advance, r) else (0, this) end fun error_msg(): String => _a.error_msg()","title":"Skip"},{"location":"src/peg/source/","text":"use \"files\" class val Source let path: String let content: String new val create(filepath: FilePath) ? => path = filepath.path let file = OpenFile(filepath) as File content = file.read_string(file.size()) file.dispose() new val from_string(content': String, path': String = \"\") => (path, content) = (path', content')","title":"Source"},{"location":"src/peg/terminal/","text":"class Terminal is Parser \"\"\" A terminal parser accumulates a single lexical token rather than an AST. It applies the hidden channel once before starting, but not while parsing its elements. \"\"\" let _a: Parser let _label: Label new create(a: Parser, l: Label = NoLabel) => _a = a _label = l fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => let from = skip_hidden(source, offset, hidden) match _a.parse(source, from, false, NoParser) | (let length: USize, Lex) => result(source, offset, from, length, tree, _label) | (let advance: USize, let r: Parser) => (advance, r) else (0, this) end fun error_msg(): String => _a.error_msg()","title":"Terminal"},{"location":"src/peg/token/","text":"class val Token let _label: Label let source: Source let offset: USize let length: USize new val create(label': Label, source': Source, offset': USize, length': USize) => _label = label' source = source' offset = offset' length = length' fun label(): Label => _label fun string(): String iso^ => source.content.substring(offset.isize(), (offset + length).isize()) fun substring(from: ISize, to: ISize): String iso^ => source.content.substring( offset_to_index(from).isize(), offset_to_index(to).isize()) fun offset_to_index(i: ISize): USize => if i < 0 then offset + length + i.usize() else offset + i.usize() end","title":"Token"},{"location":"src/peg/unicode/","text":"primitive Unicode is Parser fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => let from = skip_hidden(source, offset, hidden) try (let c, let length) = source.content.utf32(from.isize())? if c != 0xFFFD then return result(source, offset, from, length.usize(), tree) end end (from - offset, this) fun error_msg(): String => \"a unicode character\" type R is UnicodeRange class UnicodeRange is Parser let _low: U32 let _hi: U32 new create(low: U32, hi: U32 = 0x10FFFF) => _low = low _hi = hi fun parse(source: Source, offset: USize, tree: Bool, hidden: Parser) : ParseResult => let from = skip_hidden(source, offset, hidden) try (let c, let length) = source.content.utf32(from.isize())? if (c != 0xFFFD) and (c >= _low) and (c <= _hi) then return result(source, offset, from, length.usize(), tree) end end (from - offset, this) fun error_msg(): String => recover String .> append(\"a unicode character between \") .> push_utf32(_low) .> append(\" and \") .> push_utf32(_hi) end","title":"Unicode"}]}